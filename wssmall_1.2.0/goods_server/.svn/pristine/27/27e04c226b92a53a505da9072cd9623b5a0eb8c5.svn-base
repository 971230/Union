package com.ztesoft.net.mall.core.service.impl;

import com.alibaba.fastjson.JSONArray;
import com.ztesoft.api.spring.ApiContextHolder;
import com.ztesoft.net.app.base.core.model.Member;
import com.ztesoft.net.app.base.core.model.MemberLv;
import com.ztesoft.net.eop.sdk.database.BaseSupport;
import com.ztesoft.net.eop.sdk.user.UserServiceFactory;
import com.ztesoft.net.eop.sdk.utils.UploadUtil;
import com.ztesoft.net.framework.context.webcontext.ThreadContextHolder;
import com.ztesoft.net.framework.database.Page;
import com.ztesoft.net.framework.util.StringUtil;
import com.ztesoft.net.mall.core.model.DlyType;
import com.ztesoft.net.mall.core.model.GoodsLvPrice;
import com.ztesoft.net.mall.core.model.Product;
import com.ztesoft.net.mall.core.model.SpecValue;
import com.ztesoft.net.mall.core.model.Specification;
import com.ztesoft.net.mall.core.service.IProductManager;
import com.ztesoft.net.sqls.SF;

import org.apache.log4j.Logger;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import params.member.req.MemberLvByLvIdReq;
import params.member.req.MemberPriceListByGoodsIdReq;
import params.member.resp.MemberLvByLvIdResp;
import params.member.resp.MemberPriceListByGoodsIdResp;
import services.MemberLvInf;
import services.MemberPriceInf;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * 货品管理
 * @author kingapex
 *2010-3-9下午06:27:48
 */
public class ProductManager extends BaseSupport<Product> implements IProductManager {
	private static Logger logger = Logger.getLogger(ProductManager.class);
	private MemberPriceInf memberPriceServ;
	private MemberLvInf memberLvServ;
	// 本地缓存
    public static HashMap<String,Product> localCache = new HashMap<String,Product>();
	
	private void init(){
		if(null == memberPriceServ) memberPriceServ = ApiContextHolder.getBean("memberPriceServ");
		if(null == memberLvServ) memberLvServ = ApiContextHolder.getBean("memberLvServ");
	}
	/**
	 * 由productList的id生成,号隔开的字串
	 * @param productList
	 * @return
	 */
	private String getProductidStr(List<Product> productList){
		if(productList == null || productList.isEmpty())
			return "" ;
		StringBuffer str = new StringBuffer();
		for(Product pro:productList){
			
			if(pro.getProduct_id()!=null && !"".equals(pro.getProduct_id())){
				if(str.length()!=0){
					str.append(",");	
				}
				str.append(pro.getProduct_id());
			}
			
		}
		if(!StringUtil.isEmpty(str.toString()) && ",".equals(str.toString().substring(str.toString().length()-1)))
			return str.toString().substring(0,str.toString().length()-1);
					
		return str.toString();
	}
	
	@Transactional(propagation = Propagation.REQUIRED)  
	public void add(List<Product> productList ,String goodsid) {
		 //清除规格信息
		 this.baseDaoSupport.execute(SF.goodsSql("DELETE_GOODS_SPEC"),goodsid);
		 //2013-08-22 规则开启 mod by easonwu 
		 if("1".equals(productList.get(0).getHaveSpec()))
			 this.baseDaoSupport.execute(SF.goodsSql("DELETE_GOODS_LV_PRICE"), goodsid);
		 
		 //清除删除的规格数据
		 String sql  = SF.goodsSql("PRODUCT_DELETE") + " and  product_id  not in("+this.getProductidStr(productList)+")";
		 if(this.getProductidStr(productList).indexOf("null")>-1 || StringUtil.isEmpty(this.getProductidStr(productList))) //add by wui切换过程
			  sql = SF.goodsSql("PRODUCT_DELETE");
		 this.baseDaoSupport.execute(sql,goodsid);
		 
		 for(Product product:productList){
			 
			 //如果货号为空则插入新货品，如果货号存在则更新货品
			 String product_id  =  product.getProduct_id();
			 if(StringUtil.isEmpty(product_id)){
				 this.baseDaoSupport.insert("product", product);
				 product_id= product.getProduct_id();
				 product.setProduct_id(product_id);
			 }else{
				 this.baseDaoSupport.update("product", product, "product_id='"+ product_id+"'");
			 }
			 
			 //货品对应的规格组合
			 List<SpecValue> specList = product.getSpecList();
			 
			 for(SpecValue specvalue:specList){
				 this.daoSupport.execute(SF.goodsSql("GOODS_SPEC_INSERT") , specvalue.getSpec_id(),specvalue.getSpec_value_id(),product.getGoods_id(),product_id);
			 }
			 
			 if("1".equals(productList.get(0).getHaveSpec())){
				 //添加会员价格数据
				 List<GoodsLvPrice> lvPriceList  =  product.getGoodsLvPrices();
				 if(lvPriceList!=null){
					 for(GoodsLvPrice lvPrice  : lvPriceList){
						 lvPrice.setProductid(product_id);
						 this.baseDaoSupport.insert("goods_lv_price", lvPrice);
					 }
				 }
			 }else{
				 baseDaoSupport.execute(SF.goodsSql("GOODS_LV_PRICE_UPDATE"), product_id, product.getGoods_id()) ;
			 }
		 }
		 
		 if(productList.size()>0){
			 HttpServletRequest httpRequest =ThreadContextHolder.getHttpRequest();
			 String haveSpec = httpRequest.getParameter("haveSpec");
			 if(StringUtil.isEmpty(haveSpec))
				 haveSpec="0";
			 //更新商品的specs字段
			 this.baseDaoSupport.execute(SF.goodsSql("GOODS_UPDATE"), JSONArray.toJSONString(productList), haveSpec, goodsid);
		 } 
	}
	
	@Transactional(propagation = Propagation.REQUIRED)  
	public void add(List<Product> productList, String goodsid, String have_spec) {
		 //清除规格信息
		 this.baseDaoSupport.execute(SF.goodsSql("DELETE_GOODS_SPEC"),goodsid);
		 //2013-08-22 规则开启 mod by easonwu 
		 if("1".equals(productList.get(0).getHaveSpec()))
			 this.baseDaoSupport.execute(SF.goodsSql("DELETE_GOODS_LV_PRICE"), goodsid);
		 
		 //清除删除的规格数据
		 String sql  = SF.goodsSql("PRODUCT_DELETE") + " and  product_id  not in("+this.getProductidStr(productList)+")";
		 if(this.getProductidStr(productList).indexOf("null")>-1 || StringUtil.isEmpty(this.getProductidStr(productList))) //add by wui切换过程
			  sql = SF.goodsSql("PRODUCT_DELETE");
		 this.baseDaoSupport.execute(sql,goodsid);
		 
		 for(Product product:productList){
			 
			 //如果货号为空则插入新货品，如果货号存在则更新货品
			 String product_id  =  product.getProduct_id();
			 if(StringUtil.isEmpty(product_id)){
				 this.baseDaoSupport.insert("product", product);
				 product_id= product.getProduct_id();
				 product.setProduct_id(product_id);
			 }else{
				 this.baseDaoSupport.update("product", product, "product_id='"+ product_id+"'");
			 }
			 
			 //货品对应的规格组合
			 List<SpecValue> specList = product.getSpecList();
			 
			 for(SpecValue specvalue:specList){
				 this.daoSupport.execute(SF.goodsSql("GOODS_SPEC_INSERT") , specvalue.getSpec_id(),specvalue.getSpec_value_id(),product.getGoods_id(),product_id);
			 }
			 
			 if("1".equals(productList.get(0).getHaveSpec())){
				 //添加会员价格数据
				 List<GoodsLvPrice> lvPriceList  =  product.getGoodsLvPrices();
				 if(lvPriceList!=null){
					 for(GoodsLvPrice lvPrice  : lvPriceList){
						 lvPrice.setProductid(product_id);
						 this.baseDaoSupport.insert("goods_lv_price", lvPrice);
					 }
				 }
			 }else{
				 baseDaoSupport.execute(SF.goodsSql("GOODS_LV_PRICE_UPDATE"), product_id, product.getGoods_id()) ;
			 }
		 }
		 
		 if(productList.size()>0){
			 //更新商品的specs字段
			 this.baseDaoSupport.execute(SF.goodsSql("GOODS_UPDATE"), JSONArray.toJSONString(productList), have_spec, goodsid);
		 } 
	}
	
	public void addProductEcs(List<Product> productList ,String goodsId){
		 //清除删除的规格数据
		 try{
			 String sql  = SF.goodsSql("PRODUCT_DELETE") + " and  product_id  not in("+this.getProductidStr(productList)+")";
			 if(this.getProductidStr(productList).indexOf("null")>-1 || StringUtil.isEmpty(this.getProductidStr(productList))) //add by wui切换过程
				  sql = SF.goodsSql("PRODUCT_DELETE");
			 this.baseDaoSupport.execute(sql,goodsId);
			 
			 for(Product product:productList){
				 
				 //如果货号为空则插入新货品，如果货号存在则更新货品
				 String product_id  =  product.getProduct_id();
				 if(StringUtil.isEmpty(product_id)){
					 this.baseDaoSupport.insert("product", product);
					 product_id= product.getProduct_id();
					 product.setProduct_id(product_id);
				 }else{
					 this.baseDaoSupport.update("product", product, "product_id='"+ product_id+"'");
				 }
			 }
		 }catch(Exception e){
			 throw new RuntimeException("添加货品失败！"+e.getMessage());
		 }
	}

	
	public Product get(String productid) {
		Product prod = null;
		String preKey = productid + "PRODUCT_SELECT_BY_ID";
		if(null != localCache.get(preKey)) {
			return (Product)localCache.get(preKey);
		} else {
			String sql = SF.goodsSql("PRODUCT_SELECT_BY_ID");
			prod = baseDaoSupport.queryForObject(sql, Product.class, productid);
			localCache.put(preKey, prod);
		}
		return prod;
	}
	
	
	/**
	 * 形成list里实体(spec)放入子(specvlaue)list的效果
	 */
	
	public List<Specification> listSpecs(String goodsId) {
 
		String sql = SF.goodsSql("LIST_SPECS");
		List<Map> list  =this.daoSupport.queryForList(sql.toString(), goodsId);
			
		List<Specification> specList = new ArrayList<Specification>();
		String spec_id = "0";
		Specification spec =new Specification();
		for(Map map: list){
			String dbspecid = map.get("spec_id").toString();
			List<SpecValue> valueList ;
		
			if(!spec_id.equals(dbspecid)){
				spec_id = dbspecid;
				valueList  = new ArrayList<SpecValue>();
				 
				spec  = new Specification();
				spec.setSpec_id( dbspecid);
				spec.setSpec_name(map.get("spec_name").toString());
				spec.setSpec_type((Integer)map.get("spec_type"));
				
				specList.add(spec);
				
				spec.setValueList(valueList);
			}else{
				valueList = spec.getValueList();
			}
			
			SpecValue value  = new SpecValue();
			value.setSpec_value(map.get("spec_value").toString());
			value.setSpec_value_id(map.get("spec_value_id").toString());
			String spec_img  = (String)map.get("spec_image");
			
			//将本地中径替换为静态资源服务器地址
			if( spec_img!=null ){
				spec_img  =UploadUtil.replacePath(spec_img); 
			}
			value.setSpec_image(spec_img);
			
			valueList.add(value);
		}
		
		return specList ;
	}

	
	
	/**
	 * 读取某个商品的货品列表
	 */
	
	public List<Product> list(String goodsId) {
		//初始化bean
		init();
		
		String sql = SF.goodsSql("PRODUCT_SELECT_BY_GOODS_ID");
		List<Product> prolist = baseDaoSupport.queryForList(sql,Product.class, goodsId);
		
		String sql2 = SF.goodsSql("GOODS_SPEC_SELECT") ;
		List<Map> gsList  = this.daoSupport.queryForList(sql2, goodsId);
		
		List<GoodsLvPrice> memPriceList = new ArrayList<GoodsLvPrice>();
		
		Member member = UserServiceFactory.getUserService().getCurrentMember();
		double discount =1; //默认是原价,防止无会员级别时出错
		if(member!=null){
			MemberPriceListByGoodsIdResp mbpResp = new MemberPriceListByGoodsIdResp();
			MemberPriceListByGoodsIdReq req = new MemberPriceListByGoodsIdReq();
			req.setGoods_id(goodsId);
			
			mbpResp = memberPriceServ.getPriceListByGoodsId(req);
			if(mbpResp != null){
				memPriceList = mbpResp.getGoodsLvPriceList();
			}
			
			MemberLvByLvIdReq req1 = new MemberLvByLvIdReq();
			MemberLvByLvIdResp mlResp = new MemberLvByLvIdResp();
			req1.setLv_id(member.getLv_id());
			
			mlResp = memberLvServ.getMemberLvByLvId(req1);
			MemberLv lv = null;
			if(mlResp != null){
				lv = mlResp.getMemberLv();
			}
			
			if(lv!=null)
			discount = lv.getDiscount()/100.00;
		}
		for(Product pro:prolist){
			if(member!=null){
				Double price  = pro.getPrice();
				if(memPriceList!=null && memPriceList.size()>0)
				price = this.getMemberPrice(pro.getProduct_id(), member.getLv_id(), price, memPriceList, discount);
				pro.setPrice(price);
			}
			for(Map gs :gsList){
				String productid = gs.get("product_id").toString();
				//是这个货品的规格
				//则压入到这个货品的规格中
				//用到了spec_value_id
				if(  pro.getProduct_id().equals(productid)   ){ 
					SpecValue spec = new SpecValue();
					spec.setSpec_name(gs.get("spec_name").toString());
					spec.setSpec_value_id( gs.get("spec_value_id").toString() );
					spec.setSpec_id(gs.get("spec_id").toString());
					spec.setSpec_image( (String)gs.get("spec_image"));
					spec.setSpec_value((String)gs.get("spec_value"));
					spec.setSpec_type((Integer) gs.get("spec_type"));
					pro.addSpec(spec);
				}
				
			}
		}
		return prolist;
	}
	
	/**
	 * 获取某货品的会员价格
	 * @param price 销售价
	 * @param memPriceList 会员价列表
	 * @param discount 此会员级别的折扣
	 * @return
	 */
	private Double getMemberPrice(String productid,String lvid,Double price,List<GoodsLvPrice> memPriceList,double discount){
		Double memPrice  = price * discount; //默认是此会员级别的折扣价
		
		//然后由具体会员价格中寻找，看是否指定了具体的会员价格
		for( GoodsLvPrice  lvPrice  :memPriceList ){
			if(lvPrice.getProductid().equals(productid)  && lvPrice.getLvid().equals(lvid)){ //找到此货品,此会员级别的价格
				memPrice = lvPrice.getPrice();
			}
		}
		return memPrice;
	}
	
	
	@Transactional(propagation = Propagation.REQUIRED)  
	public void delete(String[] goodsid){
		String id_str = StringUtil.arrayToString(goodsid, ",");
		String sql = SF.goodsSql("GOODS_SPEC_DELETE") + " and goods_id in (" + id_str +")";
		this.baseDaoSupport.execute(sql);
		
		sql = SF.goodsSql("GOODS_LV_PRICE_DELETE") + " and goodsid in (" + id_str + ")";
		this.baseDaoSupport.execute(sql);
		
		sql = SF.goodsSql("PRODUCT_DELETE_BY_IDS") + " and  goods_id in (" + id_str + ")";
		this.baseDaoSupport.execute(sql);

	}

	
	public Page list(String name,String sn,int pageNo, int pageSize, String order) {
		order = order == null ? "product_id asc" : order;
		String sql = SF.goodsSql("PRODUCT_SELECT");
		if(!StringUtil.isEmpty(name)){
			sql += " and upper(g.name) like '%" + name.toUpperCase() + "%'";
		}
		if(!StringUtil.isEmpty(sn)){
			sql += " and g.sn = '" + sn +"'";
		}
		sql += " order by " + order;
		return this.daoSupport.queryForPage(sql.toString(), pageNo, pageSize);
	}
	
	
	
	public List list(String[] productids) {
		if(productids==null || productids.length==0) return new ArrayList();
		String sql = SF.goodsSql("PRODUCT_SELECT_BY_IDS") + " and p.product_id in(" + StringUtil.arrayToString(productids, ",") + ")";
		return  this.daoSupport.queryForList(sql.toString());
	}

	
	public Product getByGoodsId(String goodsid) {

		String sql = SF.goodsSql("GET_BY_GOODSID");
		List<Product> proList  =this.baseDaoSupport.queryForList(sql, Product.class, goodsid);
		if(proList==null || proList.isEmpty()){
		return null;
		}
		return proList.get(0);
	}
	
	public static void main(String[] args){
		double discount = 90.00/100.00;
		logger.info(discount);
	}

}
