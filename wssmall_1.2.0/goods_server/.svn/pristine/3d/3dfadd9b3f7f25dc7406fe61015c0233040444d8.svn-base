package com.ztesoft.mall.core.action.backend;

import com.ztesoft.ibss.common.util.DateFormatUtils;
import com.ztesoft.net.eop.sdk.utils.UploadUtil;
import com.ztesoft.net.framework.action.WWAction;
import com.ztesoft.net.framework.util.DateUtil;
import com.ztesoft.net.mall.core.model.LimitBuy;
import com.ztesoft.net.mall.core.model.LimitBuyGoods;
import com.ztesoft.net.mall.core.service.ILimitBuyManager;

import java.io.File;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;

public class LimitBuyAction extends WWAction {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private ILimitBuyManager limitBuyManager;
	private LimitBuy limitBuy;
	private String id;
	private boolean isEdit;
	private String[] goodsid;
	private Double[] price;
	private int[] num;
	private int[] cart_num;
	private String start_time;
	private String end_time;
	private int start_hour;
	private int end_hour;
	private File imgFile;
	private String imgFileFileName;
	private static Logger logger = Logger.getLogger(LimitBuyAction.class);
	
	public String list() {
		//this.webpage = this.limitBuyManager.list(this.getPage(), this.getPageSize());
		if(limitBuy == null){
			limitBuy = new LimitBuy();
			limitBuy.setDisabled(-1);
		}
		Map<String,String> map = new HashMap<String, String>();
		map.put("name", limitBuy.getName());
		map.put("start_time", start_time);
		map.put("end_time", end_time);
		map.put("disabled", limitBuy.getDisabled()+"");
		if(goodsid != null){
			map.put("goodsid", goodsid[0]);
		}
		this.getRequest().setAttribute("goodsname", this.getRequest().getParameter("goodsname"));
		this.webpage = this.limitBuyManager.queryList(map, this.getPage(), this.getPageSize());
		return "list";
	}
	
	public String goodsInfoList(){
		if(limitBuy == null){
			limitBuy = new LimitBuy();
		}
		Map<String,String> map = new HashMap<String, String>();
		map.put("id", id);
		limitBuy.setGoodsList(this.limitBuyManager.queryLimitBuyGoods(map));
		return "goodsInfoList";
	}

	public String add() {
		isEdit = false;
		return "input";
	}

	public String edit() {
		this.isEdit = true;
		this.limitBuy = this.limitBuyManager.get(id);
		start_hour = DateFormatUtils.formatStringToDate(limitBuy.getStart_time()).getHours();//new Date( ).getHours();
		this.end_hour= DateFormatUtils.formatStringToDate(limitBuy.getEnd_time()).getHours(); 
		return "input";
	}
	
	private int getDatelineLong(String date){
		return (int)(DateUtil.toDate(date, "yyyy-MM-dd HH").getTime()/1000);
	}
	

	public static void main(String args[]){
		int date_int  =(int) (DateUtil.toDate("2010-11-11 18", "yyyy-MM-dd HH").getTime()/1000);
		logger.info("date int :" + date_int);
		long d = ((long)date_int)*1000;
		logger.info(d);
		logger.info(new Date(  d   ).getHours());
		
		
	}
	
	public String saveAdd() {
		try {
			
			if(imgFile!=null  && imgFileFileName!=null) {
				String img = UploadUtil.upload(imgFile, imgFileFileName, "goods");
				limitBuy.setImg(img);
				
			}
			limitBuy.setStart_time(DateFormatUtils.formatDate(DateUtil.toDate(start_time+" "+start_hour, "yyyy-MM-dd HH"), DateFormatUtils.defaultPattern));
			limitBuy.setEnd_time(DateFormatUtils.formatDate(DateUtil.toDate(end_time+" "+end_hour, "yyyy-MM-dd HH"), DateFormatUtils.defaultPattern));
			
			limitBuy.setLimitBuyGoodsList(this.createLimitBuyGoods());
			this.limitBuyManager.add(limitBuy);
			this.msgs.add("限时购买添加成功");
			this.urls.put("限时购买列表", "limitBuy!list.do");
		} catch (RuntimeException e) {
			this.logger.info(e.fillInStackTrace());
			this.msgs.add(e.getMessage());
			this.urls.put("重新输入", "javascript:history.back();");
		}
		return this.MESSAGE;
	}

	public String saveEdit() {
		try {
			
			if(imgFile!=null  && imgFileFileName!=null) {
				String img = UploadUtil.upload(imgFile, imgFileFileName, "goods");
				limitBuy.setImg(img);
				
			}
			limitBuy.setStart_time(DateFormatUtils.formatDate(DateUtil.toDate(start_time+" "+start_hour, "yyyy-MM-dd HH"), DateFormatUtils.defaultPattern));
			limitBuy.setEnd_time(DateFormatUtils.formatDate(DateUtil.toDate(end_time+" "+end_hour, "yyyy-MM-dd HH"), DateFormatUtils.defaultPattern));
			
			limitBuy.setLimitBuyGoodsList(this.createLimitBuyGoods());
			this.limitBuyManager.edit(limitBuy);
			this.msgs.add("限时购买修改成功");
			this.urls.put("限时购买列表", "limitBuy!list.do");
		} catch (RuntimeException e) {
			this.logger.info(e);
			this.msgs.add(e.getMessage());
			this.urls.put("重新输入", "javascript:history.back();");
		}
		return this.MESSAGE;
	}

	public String delete() {
		//this.limitBuyManager.delete(id);
		this.limitBuyManager.editLimitState(id, limitBuy.getDisabled());
		if(1 == limitBuy.getDisabled()){
			this.msgs.add("限时购停用成功");
		}else if(0 == limitBuy.getDisabled()){
			this.msgs.add("限时购启用成功");
		}
		this.urls.put("限时购买列表", "limitBuy!list.do");
		return this.MESSAGE;
	}

	private List<LimitBuyGoods> createLimitBuyGoods() {
		if (goodsid == null)
			throw new RuntimeException("必须选择一个或更多商品");
		if (price == null)
			throw new RuntimeException("必须选择一个或更多商品");
		if (goodsid.length != price.length)
			throw new RuntimeException("商品价格不正确");

		List<LimitBuyGoods> goodsList = new ArrayList<LimitBuyGoods>();
		for (int i = 0; i < goodsid.length; i++) {
			LimitBuyGoods buyGoods = new LimitBuyGoods();
			buyGoods.setGoodsid(goodsid[i]);
			buyGoods.setPrice(price[i]);
			buyGoods.setNum(num[i]);
			buyGoods.setCart_num(cart_num[i]);
			goodsList.add(buyGoods);
		}

		return goodsList;
	}

	public ILimitBuyManager getLimitBuyManager() {
		return limitBuyManager;
	}

	public void setLimitBuyManager(ILimitBuyManager limitBuyManager) {
		this.limitBuyManager = limitBuyManager;
	}

	public LimitBuy getLimitBuy() {
		return limitBuy;
	}

	public void setLimitBuy(LimitBuy limitBuy) {
		this.limitBuy = limitBuy;
	}

	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public boolean getIsEdit() {
		return isEdit;
	}

	public void setIsEdit(boolean isEdit) {
		this.isEdit = isEdit;
	}

	public String[] getGoodsid() {
		return goodsid;
	}

	public void setGoodsid(String[] goodsid) {
		this.goodsid = goodsid;
	}

	public Double[] getPrice() {
		return price;
	}

	public void setPrice(Double[] price) {
		this.price = price;
	}

	public String getStart_time() {
		return start_time;
	}

	public void setStart_time(String startTime) {
		start_time = startTime;
	}

	public String getEnd_time() {
		return end_time;
	}

	public void setEnd_time(String endTime) {
		end_time = endTime;
	}

	public void setEdit(boolean isEdit) {
		this.isEdit = isEdit;
	}

	public int getStart_hour() {
		return start_hour;
	}

	public void setStart_hour(int startHour) {
		start_hour = startHour;
	}

	public int getEnd_hour() {
		return end_hour;
	}

	public void setEnd_hour(int endHour) {
		end_hour = endHour;
	}

	public File getImgFile() {
		return imgFile;
	}

	public void setImgFile(File imgFile) {
		this.imgFile = imgFile;
	}

	public String getImgFileFileName() {
		return imgFileFileName;
	}

	public void setImgFileFileName(String imgFileFileName) {
		this.imgFileFileName = imgFileFileName;
	}

	public int[] getNum() {
		return num;
	}

	public void setNum(int[] num) {
		this.num = num;
	}

	public int[] getCart_num() {
		return cart_num;
	}

	public void setCart_num(int[] cart_num) {
		this.cart_num = cart_num;
	}

}
