package com.ztesoft.net.service.impl;

import com.alibaba.fastjson.JSON;
import com.powerise.ibss.framework.FrameException;
import com.powerise.ibss.util.DBUtil;
import com.ztesoft.form.util.StringUtil;
import com.ztesoft.ibss.common.util.Const;
import com.ztesoft.ibss.common.util.DateFormatUtils;
import com.ztesoft.ibss.common.util.DateUtil;
import com.ztesoft.net.framework.context.spring.SpringContextHolder;
import com.ztesoft.net.framework.database.IDaoSupport;
import com.ztesoft.net.mall.core.utils.ICacheUtil;

import java.io.PrintStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.methods.PostMethod;
import org.apache.commons.httpclient.methods.RequestEntity;
import org.apache.commons.httpclient.methods.StringRequestEntity;
import org.apache.commons.httpclient.params.HttpMethodParams;
import org.apache.log4j.Logger;
import org.junit.Test;



public class ByLtstoreBackService {
	private static Logger logger = Logger.getLogger(ByLtstoreBackService.class);
	
    public void execute(Map map ) throws Exception {
    	String syn_status = "CLSB";
    	JSONObject baseReq = new JSONObject();
		 JSONObject req = new JSONObject();
		 JSONObject reqObj = new JSONObject();
		 JSONObject head = new JSONObject();
		 JSONObject body = new JSONObject();
		 JSONObject data = new JSONObject();
		 JSONArray dadta_list = new JSONArray();
		 ICacheUtil cacheUtil = SpringContextHolder.getBean("cacheUtil");
		 //String provinceCode = "36";//cacheUtil.getConfigInfo("KDYYD_PROVINCECODE");
		 String appcode = cacheUtil.getConfigInfo("KDYYD_APP_CODE");/*"BA3CC5E3241A42349D2B2173309E6873";*/
		 String url = cacheUtil.getConfigInfo("KDYYD_URL");/*"http://132.151.42.121:8006/api/rest";*/ //"http://132.38.2.88:80/zop/broadband/bespeak/syncState/v1";
		 String HMAC = cacheUtil.getConfigInfo("KDYYD_HMAC");/*"GilDLPDb5BYqMbayMiZGTUoBfp0GQCZqwY9jVmOs52ToDttpaoQY7A3xP0o23jgzvxYrNHwhZfnv6QemLsownw==";*/  //"mxDQfaSvJ2pEPk8mMxD76/TzlKXYGweqiDxaeBXE53SrhhmP61p47PwqCFFt8bT5qSNJijBYMhVEMTOCxb0zBw==";
		 String AES = cacheUtil.getConfigInfo("KDYYD_AES");/*"qEnKWukeREV6Or4EDWU4dw==";*/  //"lmFhZj5nPJQ8iQLigPjPwg==";
		 String KDYYD_PARAMETER = cacheUtil.getConfigInfo("KDYYD_STATUS_PARAMETER"); 
		 JSONObject PARAMETER = JSONObject.fromObject(KDYYD_PARAMETER);
		 String timestamp = DateUtil.getTime6();
		 String uuid = String.valueOf(UUID.randomUUID());
		 data.put("bespeakId", String.valueOf(map.get("bespeakId")));
		 data.put("dealState", String.valueOf(map.get("dealState")));
		 data.put("dealTime", String.valueOf(map.get("dealTime")));
		 dadta_list.add(data);
		 body.put("dataList", dadta_list);
		 head.put("timestamp", timestamp);
		 head.put("uuid", uuid);
		 try {
			head.put("sign", ByJtKdBo.makeSign(appcode,timestamp,uuid,HMAC));
		} catch (Exception e) {
			modStatus(map,syn_status,"1");
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		 reqObj.put("head", head);
		 reqObj.put("body", body);
		 req.put("appCode", appcode);
		 req.put("reqObj", reqObj);
		 PostMethod postMethod = new PostMethod(url);
			postMethod.setRequestHeader("Content-type", "application/x-www-form-urlencoded; charset=UTF-8");
			postMethod.setRequestHeader("Accept-Language", "us");
			postMethod.setRequestHeader("CONN_type", "SSL");
			postMethod.getParams().setParameter(HttpMethodParams.HTTP_CONTENT_CHARSET,"utf-8");  
			String busiContent = JSON.toJSONString(req);
			String method = PARAMETER.getString("method");
		      String version = PARAMETER.getString("version");
		      String access_token = PARAMETER.getString("access_token");
		      String app_id = PARAMETER.getString("app_id");
		      String sign_method = PARAMETER.getString("sign_method");
		      String secret = PARAMETER.getString("secret");
		      String charset = PARAMETER.getString("charset");
			/*String method = "zop.user.broadband.MSGStatusBack";
		      String version = "2.0";
		      String access_token = "Y2IxYmM5ZThhMzMwNjJkMzUxMDJmZjMyZmNiYzUzODg=";
		      String app_id = "81190";
		      String sign_method = "md5";
		      String secret = "3f0f5398dcabd4c9";
		      String charset = "utf-8";*/
			String sign = ByJtKdBo.getSign(busiContent, secret, sign_method, charset);
			//请求map
			Map reqMap = new HashMap();
			//AIP 必要参数
			baseReq.put("sign", sign);
			baseReq.put("app_id", app_id);
			baseReq.put("access_token", access_token);
			baseReq.put("method", method);
			baseReq.put("version", version);
			baseReq.put("timestamp", DateFormatUtils.formatDate("yyyyMMddHHmmss"));
			baseReq.put("format", "json");
			baseReq.put("sign_method", sign_method);
			baseReq.put("content", busiContent);
			String requestStr=JSON.toJSONString(baseReq);
	        RequestEntity entity = new StringRequestEntity(requestStr,"application/json","UTF-8");
	        PostMethod postmethod = new PostMethod(url);
	        postmethod.setRequestEntity(entity);
	        postmethod.setRequestHeader("Content-Type","application/json;charset=UTF-8");
	        new HttpClient().executeMethod(postmethod);
	        byte[] contentNew = postmethod.getResponseBody();
	        String str = new String(contentNew, "utf-8");
	        JSONObject resp = JSONObject.fromObject(str);
	        logger.info(resp.toString());
	        JSONObject result = resp.getJSONObject("result");
	        String  rspCode = result.get("rspCode").toString();
	        
	        if(rspCode.equals("0000")){
	        	syn_status = "CLCG";
	        }
	        logger.info("修改数据库数据状态==="+str);
        	modStatus(map,syn_status,"1");
    }
    //插入日志表
    public static void modStatus(Map map,String syn_status,String num){
    	IDaoSupport baseDaoSupport = SpringContextHolder.getBean("baseDaoSupport"); 
    	String update_sql = " update es_kd_order_status_syn set syn_status=?,syn_num=(syn_num+to_number(?)) where id=? ";
    	String suc_sql = " insert into es_kd_order_status_syn_his "
    			+ " (id,bespeakid,order_id,dealstate,dealtime,syn_status,syn_num,source_from) "
    			+ " (select id,bespeakid,order_id,dealstate,dealtime,'CLCG',syn_num+1,source_from from es_kd_order_status_syn where id=?) ";
    	String del_sql = " delete from es_kd_order_status_syn where id=? ";
		  if(!StringUtil.isEmpty(syn_status)&&"CLCG".equals(syn_status)){
			  baseDaoSupport.execute(suc_sql, new String[]{Const.getStrValue(map, "id")});
			  baseDaoSupport.execute(del_sql, new String[]{Const.getStrValue(map, "id")});
		  }else{
			  baseDaoSupport.execute(update_sql, new String[]{syn_status,num,Const.getStrValue(map, "id")});
		  }
		logger.info("插入状态回填日志结束*-*-*-*");

	  }
    public static String makeSign (String appCode,String timestamp,String uuid,String HMAC) throws Exception {
        StringBuffer sb = new StringBuffer();
        //appCode+head节点（除sign节点,字母升序）+hmac密钥
        sb.append("appCode").append(appCode)
                .append("timestamp").append(timestamp)
                .append("uuid").append(uuid)
                .append(HMAC);
        return SecurityTool.sign(HMAC,sb.toString());
    }
	
	/**
	 * 测试代码
	 * @param args
	 */
    
	public static void main(String args[]){
		try {
			//String ids="4718020867375079,9118020867384957,7218021068173501,3918021068179045,1418021068187953,6718021068195682,7018021068213998,5218021369238700,1018021369259275,5418020867406489,8518020867440341,3518021068241481,8218021068257812,5718021068275614,7518020867452652,9318020867454066,4318020867475943,6718021068309695,9118020867522518,3218021168413435,7318021168421544,1218021168421761,3618021168423337,5218021369495356,3918020867545850,5618020867563365,5018020867572341,6418020867578537,6218021168433091,2518021168439361,5018021168460891,7618020967590994,2218021168534911,2918021168535529,2918020967633382,2418020967639206,4518021168540742,6918021168558772,1518021168612810,6818020766921152,4218020766956536,8618020766957598,9618020967667122,1918021168627998,1818020967747656,3018020967778037,1318020967781829,7018021168748685,7618021268795631,4518020767056662,1718020967792857,8118021268829668,2518020767084621,6218020967843096,7718020967892459,2718020967904921,9618020967908247,6818020767114723,6018020767120507,9718020967918206,3118020967984660,5818021268932314,3218021269002184,6818020767164726,9318021068020402,1718021068034959,8918020767205991,5818020767208616,3418020767210417,6018020767217045,5218021068039226,5618021068051976,1918021068063745,7118021068065447,7318021269086157,9018020867275358,4418021068077807,3018021068103575,5918020867290913,1118020867291847,2918020867328937,2518021068142563,3718021068164336,6218020666529691,4718020666557080,2918020666632239,1418020666647866,5418020666678915,9418020666843216,3718020566399712";
			//String ids="6218020265133687,8918020265152042,3218020265155233,5918020265195705,9618020265259071,8718020265273740,9018020265343218,1818020265352588,1118020265366222,1618020265410954,1018020265466128,3118020365626244,7118020365659124,2918020365676607,4618020365681494,6818020365755087,3518020465826081,4918020465838516,2418020465881655,9818020465952985,2818020465960087,5618020466033932,9618020466041458,4818020466047615,3018020566126498,1018020566147725,2418020566172942,3118020566269688,1318020566290508,2018020566327803,5518020566358187,1318020566362439,4418020566364294,1518020566441264,6118020566442662,8418020566480120,6118020566480949,9018020666525381,2418020666540697,1418020666581138,6218020666673243,8418020666677611,8918020666689657,4618020666693319,3618020666726153,1418020666749448,6818020666793194,8918020666801051,5718020766873439,4318020766888665,3918020766897218,2518020766916422,9518020766986255,6418020766990496,7618020767019084,8618020767029184,4918020767092430,9218020767109365,7218020767134242,3618020767134996,6218020867296597,7318020867337405,6318020867339012,7318020867346844,6118020867380886,3318020867385714,1318020867399498,7218020867402556,8518020867435996,6418020867500355,5518020867540390,8818020867560079,8318020967618353,9418020967623540,6918020967636580,5318020967659280,7118020967661002,3418020967697244,8218020967772632,2118020967791366,4818020967801300,2218020967819722,6918020967852166,7018020967852175,3918020967875205,6118020967883626,6618020967902403,9818020967908285,1018020967918366,8618020967942754,3418020967946497,2818020967954991,9318021067999963,2118021068058174,9518021068068297,5818021068077529,8818021068117554,3118021068181320,7018021068182736,7718021068217072,3318021068230088,4918021068237360,5618021068238787,5918021068242876,4018021068258005,4618021068287719,3618020766934631,8618020767034359,1818020867530435";
			//String ids="4018021870348059,5118021970451540,6018021970565647,7518022070613911,1618022070698646,8018022070723295,9918022070723374,3918022070761154,5318022070769857,3618022070771229,3018021970499779,3818021970502771,1318021970502879,8218021970503344,7618021970504565,8618021970512939,9618021970521800,5318021970522827,6018021970528727,8318020967618353,3918021469685105,3018021168616161,6118021569834135,9818021569906880,4118021269125726,2018021870275144,7018021870275519,5018021870296487,6118021870312166,6118021870316510,5618022572122980,5618022572125440,9318022572126167,9018022572130733,9418022271216758,6718022271218604,3118022271222687,5818022271243165,7318022271243224,8918022572147674,3918022572164739,8318022572166436,9518022271243365,9518022271254413,7218022572240139,1218022271311488,5318022371289677,5418022371351455,5618022371356167,2418022572190438,1518022572205981,7918022572211311,5218022572217836,1118022572224320,6918022371361099,8818022371362340,6318022371365961,7118022371366027,9718022371431059,3618022371448105,5318022371457389,6118022371380035,5218022371484144,8918022371489167,6118022371495836,4618022371522684,7418022371531699,3218022371528005,3218022371536857,5018022170828589,7318022170829899,7618022170857187,4018022371528288,6218022170864594,8018022170865028,7818022170866505,2618022170819655,6618022170878827,3118022170879868,4018022170879933,4018022170901710,7218022471658264,8218022471659362,2618022471665558,8518022471668137,8418022170923518,3518022170924446,4618022170938138,2218022170939064,8918022170949165,1118022170960543,5518022471678323,4118022471679030,2018022471698942,3518022471698954,7018022471700071,6318022471701329,8218022471724088,1818022170960616,2418022170960685,2618022170985049,5418022471738556,9218022471738809,9018022471750349,6918022471772792,6618022471792840,5618022271063140,9618022271089040,6918022471798392,3018022471841546,4418022471842758,1818022471842849,4218022471843044";
			//String ids="3818022271095614,2418022271099423,3118022271103316,6218022271111239,6418022271113611,6318022271114736,8718022471862094,7918022471765370,8318022471765379,3818022271120182,7118022271121818,4918022271129913,2718022271137487,8618022271140157,2318022471921756,8718022471957890,8818022471957902,7518022471958895,6518022271148428,4318022271150279,9318022271160864,9418022271160870,9818022271160915,1918022271160954,7518022572051536,5318022271167820,1318022271181929,4718022271189705,5118022271189722,9918022271177474,9718022271204227,1418022271177711,1718022271177712,1718022572069321,7318022572304377,3818022672356356,4118022672359448,2818022672364373,6318022672383140,1918022672383519,2018022672383532,2118022672390564,5018022672390914,1618022672395410,5918022672400959,9918022672401200,3918022672403356,3418022672404887,3318022672414580,5218022672419983,5818022672439192,3018022672454069,8218022672467811,5018022672468351,5518022672475002,4918022672480735,2818022672488407,5918022672494387,2318022672534340,7218021068173501,3918021068179045,7218021068180271,1418021068187953,7018021068213998,3418021068224816,1218021369225597,1618021369225631,9518021369228549,5218021369238700,3518021369154921,1018021369259275,2618021068230032,3518021068241481,8218021068257812,1118021068275163";
			//String ids="3118021369298092,4918021369338773,2018021369347499,2418021369347525,8418021369354967,3818021068322291,3218021068331633,1018021068356004,7918021369382061,8518021369395290,3218021168413435,9318021168415038,6918021168416788,9318021168419859,3618021168423337,2018021168425087,4518021369429664,4518021369432598,3218021369446967,2518021369465138,1718021369468078,6118021369470750,5218021369495356,2818021469509252,3918022070761154,6718020967586553,9218021168430614,6218021168433091,4718021168435677,7918021168460036,5018021168460891,3118021469533882,6018021469536325,1518021469536623,2818021469538571,7618020967590994,5718020967599994,7118020967601240,4118020967603177,8318020967618353,8818020967618381,9518021168480086,1618021168480178,1818021168505034,2218021168534911,2918021168535529,6218021469586850,3318020967628104,3118020967629736,2918020967633382,2418020967639206,7418020967642949,8518020967643039,4518021168540742,3018021168558494,6918021168558772,6718021168558960,1118021168604462,1718021168606468,3118021168613848,9318021469645958,2418021469650052,3918021469685105,4718021469703425,5818020967670713,7518020967681616,9218020967690687,1818020967715586,9118020967725577,6718020967729271,7018020967740591,9018020967744239,6818020967746283,3018021168616161,9518021168641612,7818021168663918,6118021168688032,6518021168714026,1118021469727424,4618021469735113,3318021469736549,2018021469741984,1918021569778920,7018021569796332,1818020967747656,5918020967751899,2418020967757125,4318020967763051,2318020967768939,6818020967777058,3018020967778037,7718020967784111,3018020967791449,3418021168754348,7618021268795631,3618021268801111,8318021268811942,7318021569809369,8618021569829214,6118021569834135,6618021569842886,5418021569844355,8718020967798935,5918020967806992,7218020967820934,9718020967822445,8118020967823855,5418020967831306,5018021268823485,8618021268827317,4618021268828609,4118021268829532";
			//String ids="8818021268838390,6818021268842993,5018021268867017,9818021569906880,1018021669962057,6218020967843096,3318020967844616,3018020967864662,3918020967875205,7818020967879604,7718020967892459,6618020967902403,2718020967904921,9818020967908285,2218021268888669,6118021268918723,2118021669986712,6118021669990702,2418021669997801,5018021670018757,1818021670022281,5418020967912595,2818020967916796,3418020967946497,9118020967967248,3118020967984660,5818021268932314,6918021268992642,3218021269002184,9918021269007237,8118021670034816,2918021770076635,7518021770097373,5218021770103807,9718021770106821,3618021068012118,6218021068026388,8118021068027834,3318021068030500,5518021068038876,8318021269019788,3018021269026748,6718021269047120,6218021269049981,5418021269050838,6918021770127191,6218021770134554,8318021770148601,9618021770170408,5918021068052506,1718021068054618,3118021269078291,7318021269086157,4918021269087658,5518021269087720,7818021269089584,3718021269112155,6918021770204369,9818021770206757,1918021770220573,2518021068093902,4418021068095407,1618021068102204,4618021068107908,8818021068117554,4118021269125726,2118021269128845,5518021269129134,9718021369175529,2018021369183527,7118021369189062,7118021068154526,6218021068155274,4518021068159752,1218021068160128,3718021068164336,3418021068168201,7318022271243224,1218022271311488,5018022170828589,7318022170829899,8518022471668137,4118022672359448";
			//String ids="6918021970472000,7918021870240786,7018022271221424,6818022572223035,2218022371390415,8418022371430896,3218022371479450,3918022170874422,1718022471958088,5418022271206846,5118022672367762,3118022672384226,4418022672517518,8618021369416826,7318021369421062,7418021469553770,9818021168591595,6318021268896546,8418020967911822,5918021369188005,3318021369195850";
			//String ids="7318022271243224,3918021469685105,4418022471842758";
			//String ids="6218022772775823,3318022772771383,4518022772730970,9718022772687246,7718022672455009,9018022772751280,2318022672534340,9218022572080867,2218022672608004,1718022772681525,9518022772697681,4618022672435376,2818022672371214,9718022572306630,8418022572298142,7918022772709693,9818022271160923,1518022672360280,8418022772742397,6418022772808227,4718022672490815,6018022772828300,5018022772827665,2218022772806292,5518022772805993,6618022672396419,7118022672422554,3618022672364295,7118021970449304,2718022772728105,2818022772816301,2018022772794564,5318022572291787,4018022772861663,5018022671766167,4218022772857869,2518022772845855,7318022772839368,6818022772715188,6818022572211158,7118022772796919,6418022572248212,7218022672422560,5118022672402940,6518022572155969,3018022672377030,7018022771766436,2218022672458548,3918022471764158,4418022271205512,6118022772759842,3418022772694911,4318022672465108,1718022672542241,3918022371520410,1618022772731220,5918022772725470,5518022772912998";
			//String ids="4918022671766166,2418022772803614,6318022471667925,3418022772716610,8018022772699785,7318022672632407,4618022772867870,9118022772803431,1718022772886437,1618022572205362";
			//String ids="2718022371468712,8818022371486263,2718022371516699,7618022371561960,2918022471651591,5818022471853108,9618022471670651,2118022471763893,6218022471777953,8418022471890809,1418022471780237,4818022471892448,1618022471780244,9018022471816042,4418022471895853,9918022471902930,6418022471911703,1418022471846158,3218022471880879,3318022471923698,6218022572107476,9318022471961876,6018022572108502,9218022572115599,8118022572056240,9418022572058521,7518022572060007,8518022572081651,7018022572083275,3618022572108921,3218022572164689,1718022572165376,3618022572183704,8318022572196049,7918022572218113,8018022572218117,5218022572243654,9218022572300637,9818022572189251,4718022572201430,1518022572303052,4818022572238530,6918022672347702,4718022672360903,9818022672364019,1518022672436765,6018022672463720,8918022672530707,2418022672532656,6818020967736544,3818020967759954,1818020967812724,1918020967818415,3918020967826015,2318020967830696,1318020967875730,9718020967886175,8518020967889905,3718020967943390,7718020967976011,8018021068032397,6818021068033621,1318021068047641,5918021068073732,4418021068078092,9618021068105808,5418021068111608,8318021068147067,1018021068153759,3018021068154981,6718021068158397,1118021068166468,4818021068179442,3818021068203329,7718021168393963,6518021168420256,2918021168449525,3218021168456248,3518021168456262,7418021168575238,6118021168585152,1618021268885811,3018022070787785";
			//String ids="8818021970535584,6618022070601727,7818021870297583,3318021870297794,9518022070616334,1918021870383473,8918021970476140,5318021870298099,5618021970518261,2218021970485189,5318021870252328,4118021970538347,9218021970574619,8518022070620087,8218022070631887,2918022070624171,8018022070699089,6918022070636544,6218022170918265,6318022170953359,6318022171000556,3518022070680385,4618022271094606,7318022271103919,2718022070742910,8418022070797852,8718022170897903,2018022170824409,3718022170926391,6818022170914154,3618022271182073,3518022271197485,8918022171010549,1518021970542089,3318022170951656,8218022271103161,9618022170860752,7918022271255619,9418022271262130,7518022271105408,7218022271270315,4018022271275859,9718022271152804,3218022271099467,9018022271106374,9818022170906273,8418022170926270,5218022271109342,4218022371476856,5218022271088852,7518022271175019,2518022271278122,1418022371491712,8018022271092652,2118022371369901,6518022271126912,8118022371426600,3318022371340721,7418022271147920,4018022371564791,1918022271227927,8518022371452772,6518022371353354,2318022371353444,5018022371573580,5618022371399666,8118022371502968,8218022271228277,6618022371402476,4418022271241367,8618022371511972,4318022371411209,3218022371589617,8518022371438311,7718022471655245,4818022471657663,5718022471715762,4218022271256433,9918022271140365,9518022371447372,5618022471742004,9518022271205206,8018022271205684";
			//String ids="1818021369178491,1918021369197369,7918021369224053,9018021369227368,5118021369235184,3118021369254475,9618021369259768,8618021369284123,1618021369299927,7618021369315295,2118021369325981,5318021369350142,4718021369373449,8518021369374489,9018021369400017,8318021369403569,3318021369405167,2818021369410206,5918021369411889,6318021369415715,9018021369419811,3718021469530390,6918021469552095,1518021469606108,8518021469670647,7718021469566714,9718021469684292,3018021569787510,1318021469653597,9318021469672308,4618021569909136,3818021469645145,3018021469606217,4718021469694461,5418021469709292,4718021770147064,9718021669974680,5218021770181469,3618021469697012,9218021469724318,3018021770207315,8518021970485659,1418021970561462,9418022070640237,2118021870310624,4518021870298207,9318021569812835,5018021870315668,5818021669983538,8618021670010462,5718021670012438,3318021670033235,4918022170836198,4118021670037544,5718021770173209,9918021770174949,6918021670032310,8518021670032421,3918021670032601,1318021670033065,2818021670034135,6118021770197381,2118021670034425,2118021770199212,6918021870316388,2218021970503968,7218021970428270,6618021870234261";
			//String ids="8718021268913972,8818022873087113,8918021068286230,9218030374116821,2018021168391686,3218030173584079,5118022572237879,2018022572237501,4018021469549081,3518021269036160,9218020466081845,4318012261465603,8917122751043619,2618022371553394,6518020365516094,2118030474819603,5918030474561748,3318030374368554,6718030374203940,9318030274086021,2518030274084394,3918030273986807,6418030273977116,4218022873210845,6318022672495095,5818021970491663,4018021870391881,3118012462412161,8718030173463248,1318021068045733,3218022772778553,8218022471664398";
			//String ids="6718021770185091,6818030273917743,1618030173588550";
			//String ids="2518022672457825,8818022271243282,1718022170960602,1218021168472977,6118021168466018,7818022672610209,5518022572239213,5918022271095745,7618020967611332,8318022672471678,4218022572135904,7118021569908570,1018022271161071,5418030173451882,9318022873238083,2518022170960697,6318022070614575,9318030173352358,2518022672400708,4818022572249392,3718022572229250,5318022572194849,7918022572101103,3118022471865656,2518022471843683,4918022371363548,5818022271095155,3518022271095597,3118022070602024,4718021469742182,5318021268932292,7618020967590516,2818020867458691,1318020767123491,9818021168377393,1818022672388500,7118021569794692,3218021068008009,8018030273715819,5018022772674471,8018022070631866,1918021870378590,3318021869519167,7518020666746212";
			String ids="8517110832979073";
			String idarr[] =ids.split(",");
			for(int i=0; i<idarr.length;i++){
				System.out.print("开始刷数据id++++++r*-*-**-*-*-*-*-"+idarr[i]);
				Map map =new HashMap();
				map.put("bespeakId", idarr[i]);
				map.put("dealState", "5");
				map.put("dealTime", "2018-05-23 09:50:01");
				new ByLtstoreBackService().execute(map);
			}
//			Map map =new HashMap();
//			map.put("bespeakId", idarr[i]);
//			map.put("dealState", "2");
//			map.put("dealTime", "2017-11-17 18:50:01");

			//new ByLtstoreBackService().execute(map);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}



}