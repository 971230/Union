package com.ztesoft.net.mall.core.timer;

import java.util.List;
import java.util.Map;
import java.util.concurrent.ThreadPoolExecutor;

import javax.annotation.Resource;

import org.apache.log4j.Logger;

import params.ZteRequest;
import params.ZteResponse;
import zte.net.ecsord.common.AttrConsts;
import zte.net.ecsord.common.CommonDataFactory;
import zte.net.ecsord.common.StypeConsts;
import zte.net.ecsord.params.busi.req.AttrGiftInfoBusiRequest;
import zte.net.ecsord.params.busi.req.OrderTreeBusiRequest;

import com.zte.cbss.autoprocess.CreateCustomHandler;
import com.zte.cbss.autoprocess.HttpLoginClient;
import com.zte.cbss.autoprocess.HttpLoginClientPool;
import com.zte.cbss.autoprocess.model.CustomBill;
import com.zte.cbss.autoprocess.model.CustomInfo;
import com.zte.cbss.autoprocess.model.LoginInfo;
import com.ztesoft.api.Task;
import com.ztesoft.api.TaskThreadPool;
import com.ztesoft.api.ThreadPoolFactory;
import com.ztesoft.common.util.ListUtil;
import com.ztesoft.inf.framework.commons.CodedException;
import com.ztesoft.net.mall.core.consts.EcsOrderConsts;
import com.ztesoft.net.model.CBSSBusiHandleVO;
import com.ztesoft.net.service.IOrdArchiveManager;
import com.ztesoft.net.service.IOrdBSSTacheManager;

public class OrderCBSSDealTimer {
	private static Logger logger = Logger.getLogger(OrderCBSSDealTimer.class);
	@SuppressWarnings("static-access")
	@Resource
	private IOrdArchiveManager ordArchiveManager;
	@Resource
	private IOrdBSSTacheManager ordBSSTacheManager;
	
	public void run(){
		if (!CheckTimerServer.isMatchServer(this.getClass().getName(), "run")) {
  			return;
		}
		try{
			List<CBSSBusiHandleVO> list = ordArchiveManager.getOrderByCbss();
			if(!ListUtil.isEmpty(list)){
				for(CBSSBusiHandleVO request : list){
					HttpLoginClient httpLoginClient = null;
					String order_id = request.getOrder_id();
					OrderTreeBusiRequest orderTree = CommonDataFactory.getInstance().getOrderTree(order_id);
					try {
						//登录 认证 
//						httpLoginClient = login(order_id);
//						httpLoginClient.getParam().setOtree_order_id(order_id);
//						httpLoginClient.getParam().setOrder_create_time(CommonDataFactory.getInstance().getAttrFieldValue(order_id, AttrConsts.TID_TIME));
//						httpLoginClient.getParam().setCustomInfo(getCustomInfo(httpLoginClient));
						List<AttrGiftInfoBusiRequest> giftInfoBusiRequests = orderTree.getGiftInfoBusiRequests();
						//处理业务
						for(int i = 0; i < giftInfoBusiRequests.size(); i ++){ // 循环订单礼品
							AttrGiftInfoBusiRequest attrGiftInfo = giftInfoBusiRequests.get(i);
							try {
								if (attrGiftInfo!=null && EcsOrderConsts.GIFT_BSS_STATUS_1.equals(attrGiftInfo.getBss_status())) {
									ordBSSTacheManager.orderCBSSDeal(attrGiftInfo, httpLoginClient);
									if (i != giftInfoBusiRequests.size()-1) {
										Thread.sleep(30000);
									}
								}
							} catch(Exception e) {
								e.printStackTrace();
							}
						}
						// 更改礼品表状态
						boolean flag = true;
						orderTree = CommonDataFactory.getInstance().getOrderTree(order_id);
						List<AttrGiftInfoBusiRequest> giftList = orderTree.getGiftInfoBusiRequests();
						for(AttrGiftInfoBusiRequest giftBusi : giftList){
							if(!EcsOrderConsts.GIFT_BSS_STATUS_4.equals(giftBusi.getBss_status())){
								flag = false;
							}
						}
						// 全部处理完成，归档
						if(flag && giftList.size() > 0){
							ordBSSTacheManager.setStatusFinish(order_id);
						}
					} catch (Exception e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				}
			}
		}catch(Exception e) {
			e.printStackTrace();
		}finally{
			
		}
	}
	
	
	
	private HttpLoginClient login(String order_id) throws CodedException, Exception {
		try {
			OrderTreeBusiRequest orderTreeBusiRequest = CommonDataFactory.getInstance().getOrderTree(order_id);
			
			String order_city_code = CommonDataFactory.getInstance().getAttrFieldValue(order_id, AttrConsts.ORDER_CITY_CODE);
			/**
			 * select a.*,a.rowid from es_dc_public_dict_relation a ;
			   select a.region_id value,a.local_name value_desc from es_regions a where a.p_region_id='440000';
			 */
			List list = CommonDataFactory.getInstance().listDcPublicData(StypeConsts.CBSS_LOGIN_USER_INFO);
			if (list == null || list.size() <=0) {
				logger.info("====》【请检查es_dc_public_ext表是否有配置登录信息！stype='cbss_login_user_info']】");
				return null;
			}
			Map map = (Map) list.get(0);
			if (map == null || map.size() <= 0) {
				logger.info("====》【请检查es_dc_public_ext表，是否有配置用户名和密码和省份】《====");
				return null;
			}
			LoginInfo info = new LoginInfo();
			info.setCbssAccount(map.get("PKEY")!=null?map.get("PKEY").toString():"");
			info.setCbssPassword(map.get("PNAME")!=null?map.get("PNAME").toString():"");
			info.setProvinceCode(map.get("CODEA")!=null?map.get("CODEA").toString():"");
			//
			HttpLoginClient client = HttpLoginClientPool.add(info);
			return client;
		} catch (Exception e) {
			throw new CodedException("8001", "用户登录失败!");
		}
	}
	
	/**
	 * 认证客户(order tree 取数据)
	 */
	private CustomInfo getCustomInfo(HttpLoginClient client) throws CodedException, Exception {
		if (null == client)
			return null;
		String order_id =client.getParam().getOtree_order_id();
//		OrderTreeBusiRequest orderTreeBusiRequest = CommonDataFactory.getInstance().getOrderTree(order_id);
		String acc_nbr = CommonDataFactory.getInstance().getAttrFieldValue(order_id, AttrConsts.PHONE_NUM);//CommonDataFactory.getInstance().getOrderTree(order_id).getOrderItemBusiRequests().get(0).getOrderItemExtBusiRequest().getPhone_num();
		try {
			CustomBill bill = new CustomBill();
			bill.setPsptId(CommonDataFactory.getInstance().getAttrFieldValue(order_id, AttrConsts.CERT_CARD_NUM));
			bill.setCustomName(CommonDataFactory.getInstance().getAttrFieldValue(order_id, AttrConsts.PHONE_OWNER_NAME));
			bill.setContact(CommonDataFactory.getInstance().getAttrFieldValue(order_id, AttrConsts.PHONE_OWNER_NAME));
			bill.setContactPhone(CommonDataFactory.getInstance().getAttrFieldValue(order_id, AttrConsts.PHONE_NUM));
			bill.setPsptEndDate("2018-05-08");
			bill.setIdTypeCode("1");
			bill.setPhone(CommonDataFactory.getInstance().getAttrFieldValue(order_id, AttrConsts.REFERENCE_PHONE));
			bill.setPostAddress(CommonDataFactory.getInstance().getAttrFieldValue(order_id, AttrConsts.CERT_ADDRESS)); // 通信地址必须大于八个字符
			bill.setSerialNumber(acc_nbr); // 设置要办理业务号码   真实环境需要改代码
			CustomInfo customInfo = CreateCustomHandler.emulate(bill, client);
			return customInfo;
		} catch (Exception e) {
			throw new CodedException("8002", "客户认证失败!");
		}
	}
}
