package com.ztesoft.net.mall.core.service.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import services.FlowInf;
import services.ModHandlerInf;

import com.powerise.ibss.util.DBTUtil;
import com.ztesoft.net.app.base.core.model.SupplierAgent;
import com.ztesoft.net.app.base.core.model.SupplierStaff;
import com.ztesoft.net.eop.sdk.database.BaseSupport;
import com.ztesoft.net.framework.util.ReflectionUtil;
import com.ztesoft.net.mall.core.service.ISupplierAgentManager;
import com.ztesoft.net.mall.core.service.SupplierStatus;
import com.ztesoft.net.mall.core.utils.ManagerUtils;
import com.ztesoft.net.mall.core.workflow.core.FlowType;
import com.ztesoft.net.mall.core.workflow.core.InitFlowParam;
import com.ztesoft.net.mall.core.workflow.util.ModParams;
import com.ztesoft.net.mall.core.workflow.util.ModVO;

public class SupplierAgentManager extends BaseSupport<SupplierAgent> implements
		ISupplierAgentManager {

	private ModHandlerInf modInfoHandler ;
	private FlowInf flowServ;
	
	@Override
	@Transactional(propagation = Propagation.REQUIRED)
	public void add(SupplierAgent supplierAgent,String state) {
		this.daoSupport.insert("es_supplier_agent", supplierAgent);
		
//		// 起流程
		if(StringUtils.isNotEmpty(state)){
			String currUserId = ManagerUtils.getUserId();
			flowServ.startFlow(new InitFlowParam(FlowType.SUPP_AGENT_APPLY,
					currUserId, supplierAgent.getAgent_id()));
		}
	}

	@Override
	@Transactional(propagation = Propagation.REQUIRED)
	public void dataDeal(String agent_name, String agent_certificate_number, String agent_attachment,
			String agent_type,String supplier_id) {
		this.baseDaoSupport.execute("delete from es_supplier_agent where supplier_id="+supplier_id);
		String [] sizes = agent_name.split(",");
		for(int i=0;i<sizes.length;i++){
			SupplierAgent supplierAgent = new SupplierAgent();
			supplierAgent.setAgent_name(sizes[i]);
			supplierAgent.setAgent_certificate_number(agent_certificate_number.split(",")[i]);
			supplierAgent.setAgent_attachment(agent_attachment);
			supplierAgent.setRecord_state(SupplierStatus.SUPPLIER_STATE_2);
			supplierAgent.setRegister_time(DBTUtil.current());
			supplierAgent.setAgent_type(agent_type.split(",")[i]);
			supplierAgent.setSupplier_id(supplier_id);
			add(supplierAgent,null);
		}
		
	}
	
	public List list(String supplier_id) {
		String sql = "select * from es_supplier_agent where supplier_id=? order by register_time asc ";
		return this.baseDaoSupport.queryForList(sql, SupplierStaff.class,
				supplier_id);
	}
	
	public List findAgentByUserId(String currUserId) {
		String sql = "SELECT C.* FROM ES_SUPPLIER A, ES_ADMINUSER B, es_supplier_agent C WHERE A.USERID = B.USERID"
				+ " AND C.SUPPLIER_ID = A.SUPPLIER_ID AND a.userid=? order by c.register_time asc";
		return this.baseDaoSupport.queryForList(sql, SupplierAgent.class,
				currUserId);
	}
	
	public SupplierAgent findAgentById(String agent_id) {
		String sql = "SELECT *FROM es_supplier_agent WHERE agent_id =? order by register_time asc";
		return this.baseDaoSupport.queryForObject(sql, SupplierAgent.class,
				agent_id);
	}
	
	@Override
	public List<SupplierAgent> findAgentBySupplierId(String supplierid) {
		String sql = "SELECT * FROM es_supplier_agent WHERE supplier_id =?";
		return this.baseDaoSupport.queryForList(sql, SupplierAgent.class, supplierid);
	}
	
	// 删除
	@Transactional(propagation = Propagation.REQUIRED)
	public int delete(String agent_id) {
		if (agent_id == null || agent_id.equals("")) {
			return 0;
		} else {
			String sql = "delete from es_supplier_agent where agent_id in ("
					+ agent_id + ") ";
			this.baseDaoSupport.execute(sql);
			return 1;
		}
	}

	/*
	 * 修改信息
	 */
	@Transactional(propagation = Propagation.REQUIRED)
	public void edit(SupplierAgent supplierAgent,String supplier_state) {
//		if (SupplierStatus.SUPPLIER_STATE_2
//				.equals(supplier_state)) {// 如果是审核后修改
//
//		} else {
//			//supplier.setSupplier_state(SupplierStatus.SUPPLIER_STATE_1);
//			
//			HashMap fields=new HashMap();
//			fields.put("supplier_state", SupplierStatus.SUPPLIER_STATE_1);
//			this.baseDaoSupport.update("es_supplier", fields, " supplier_id='" + supplierAgent.getSupplier_id()+"'");
//			
//			this.baseDaoSupport.update("es_supplier_agent", supplierAgent,
//					" agent_id=" + supplierAgent.getAgent_id());
//		}
		
		Map supplierAgentMap = null;
		
		supplierAgentMap = ReflectionUtil.po2Map(supplierAgent);
		
		List<ModVO> modInfos = new ArrayList<ModVO>() ;
		ModVO modVO=new ModVO();
		
		modVO.setTableName("ES_SUPPLIER_AGENT");
		modVO.setObj(supplierAgent);
		
		modInfos.add(modVO);
		
		ModParams param = new ModParams(FlowType.SUPP_MOD_AGENT  ,
				ManagerUtils.getAdminUser().getUserid(),supplierAgent.getAgent_id() ,modInfos ) ;
		
		this.modInfoHandler.checkAndStartFlow(param) ;
		
		if(modVO.getChangedFields()!=null){
			for(String afield_name :modVO.getChangedFields()){
				if(StringUtils.isNotEmpty((String)supplierAgentMap.get(afield_name))){
					supplierAgentMap.remove(afield_name);
				}
			 }
			
			supplierAgentMap.put("record_state", 0);
		}
		
		 
		this.baseDaoSupport.update("es_supplier_agent", supplierAgentMap, "agent_id='"+ supplierAgentMap.get("agent_id")+"'");
	}

	public ModHandlerInf getModInfoHandler() {
		return modInfoHandler;
	}

	public void setModInfoHandler(ModHandlerInf modInfoHandler) {
		this.modInfoHandler = modInfoHandler;
	}

	public FlowInf getFlowServ() {
		return flowServ;
	}

	public void setFlowServ(FlowInf flowServ) {
		this.flowServ = flowServ;
	}

	

}
