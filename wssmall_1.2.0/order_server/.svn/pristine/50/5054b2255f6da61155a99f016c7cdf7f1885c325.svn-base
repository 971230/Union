package com.ztesoft.net.mall.core.action.order;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.ztesoft.net.consts.OrderStatus;
import com.ztesoft.net.eop.sdk.database.BaseSupport;
import com.ztesoft.net.framework.context.spring.SpringContextHolder;
import com.ztesoft.net.framework.context.webcontext.ThreadOrderHolder;
import com.ztesoft.net.mall.core.consts.Consts;
import com.ztesoft.net.mall.core.model.Order;
import com.ztesoft.net.mall.core.service.impl.IAcceptPlugin;

public class OrderDirector  extends BaseSupport implements IOrderDirector {
	
	public  static OrderBuilder orderBuilder = new OrderBuilder();

		
	private IAcceptPlugin acceptPlugin;
	
	/**
	 * 流程处理
	 * @param orderRequst
	 * @return
	 */
	
	public  OrderResult perform(OrderRequst orderRequst) {
		List<FlowEntry> flows = orderBuilder.getNextFlows(orderRequst.getService_name()+orderRequst.getAccept_action(), orderRequst.getFlow_name());
		OrderResult orderResult = acceptPlugin.perform(orderRequst,flows);
		if(Consts.CODE_FAIL.equals(orderResult.getCode()))
			throw new RuntimeException(orderResult.getMessage());
		return orderResult;
		
	}
	
	
	/**
	 * 绘制操作按钮
	 * @param orderRequst
	 * @return
	 */
	public  OrderResult display(OrderRequst orderRequst,Order order) {
		OrderResult orderResult = new OrderResult();
		AbstractHander abstractHander=	(AbstractHander)SpringContextHolder.getBean("commonBtnsHander");
		//abstractHander.setOrderRequst(orderRequst);
		//abstractHander.setOrderResult(orderResult);
		
		ThreadOrderHolder.getOrderParams().setOrderResult(orderResult);
		ThreadOrderHolder.getOrderParams().setOrderRequst(orderRequst);
		
		orderResult.setOrder(order);
		abstractHander.render();
		return orderResult;
	}


	

	
	private  Map<String, List<FlowEntry>> flowMaps = new HashMap();

	public static final String COLLECT = "COLLECT";
	public static final String AUDIT = "AUDIT";
	public static final String ACCEPT = "ACCEPT";
	public static final String PAYMENT = "PAYMENT";
	public static final String DILVERY = "DILVERY";
	public static final String FINISH = "FINISH";
	public static final String CANCEL = "CANCEL";
	public static final String WITHDRAW = "WITHDRAW";
	
	
	public static final String CLOUD_KEY = "CLOUD";
	public static final String CONTRACT_KEY = "CONTRACT";
	public static final String RATE_CARD_KEY = "RATE_CARD";
	public static final String RECHARGE_CARD_KEY = "RECHARGE_CARD";
	
	public static final String COMMON_KEY = "COMMON";
	
	
	/**
	 * 订单流程处理
	 */
	public  void buildOrderFlow() {
		buildCloudOrderFlow();
		buildContractOrderFlow();
		buildRateCardOrderFlow();
		buildRechargeCardOrderFlow();
	}
	
	
	
	
	//换货订单
	public  void buildChangeShipFlow() {
		buildCommonChangeShipFlow();
	}
	
	
	//退货订单
	public  void buildRefundShipFlow() {
		buildCommonRefundShipFlow();
	}
	
	
	//退费订单
	public  void buildRefundFeeFlow() {
		buildCommonRefundFeeFlow();
	}
	

	
	
	
	//取消订单
	public  void buildCancelFlow() {
		buildCommonCancelFlow();
	}

	//撤单
	public  void buildWithDrawFlow() {
		buildCommonWithDrawFlow();
	}
	
	
	//换货
	private void buildCommonChangeShipFlow(){
		List<FlowEntry> flows = new ArrayList<FlowEntry>();
		flows.add(new FlowEntry(DILVERY,"commonChangeShipHander"));
		flowMaps.put(COMMON_KEY+OrderStatus.ACCEPT_ACTION_CHANGE_SHIPPING, flows);
		
	}
	//退货
	private void buildCommonRefundShipFlow(){
		List<FlowEntry> flows = new ArrayList<FlowEntry>();
		flows.add(new FlowEntry(DILVERY,"commonReturnedShipHander"));
		flowMaps.put(COMMON_KEY+OrderStatus.ACCEPT_ACTION_CANCEL_SHIPPING, flows);	
	}
	//退费
	private void buildCommonRefundFeeFlow(){
		List<FlowEntry> flows = new ArrayList<FlowEntry>();
		flows.add(new FlowEntry(PAYMENT,"commonRefundHander"));
		flowMaps.put(COMMON_KEY+OrderStatus.ACCEPT_ACTION_REFUND, flows);
	}
	
	
	/**
	 * 订单取消
	 */
	private  void buildCommonCancelFlow() {
		List<FlowEntry> flows = new ArrayList<FlowEntry>();
		flows.add(new FlowEntry(CANCEL,"commonCancelHander"));
		flowMaps.put(COMMON_KEY+OrderStatus.ACCEPT_ACTION_CANCEL, flows);
	}
	
	
	/**
	 * 订单撤单
	 */
	private  void buildCommonWithDrawFlow() {
		List<FlowEntry> flows = new ArrayList<FlowEntry>();
		flows.add(new FlowEntry(WITHDRAW,"commonWithDrawsHander"));
		flowMaps.put(COMMON_KEY+OrderStatus.ACCEPT_ACTION_WITHDRAWS, flows);
	}
	
	
	
	/**
	 * 云卡
	 */
	private  void buildCloudOrderFlow() {
		
		/*订购流程*/
		List<FlowEntry> flows = new ArrayList<FlowEntry>();
		flows.add(new FlowEntry(COLLECT,"cloudCardCollectHander"));
		flows.add(new FlowEntry(AUDIT, "cloudCardAuditHander"));
		flows.add(new FlowEntry(PAYMENT, "cloudCardPaymentHander"));
		flows.add(new FlowEntry(ACCEPT,"cloudCardAcceptHander"));
		
		flows.add(new FlowEntry(DILVERY,  "cloudCardDilveryHander"));
		//flows.add(new FlowEntry(FINISH, "cloudCardFinishHander")));
		flowMaps.put(CLOUD_KEY+OrderStatus.ACCEPT_ACTION_ORDER, flows); //按流程动作区分
		
		
	}
	
	
	
	
	

	/**
	 * 合约机
	 */
	private  void buildContractOrderFlow() {
		
		List<FlowEntry> flows = new ArrayList<FlowEntry>();
		flows.add(new FlowEntry(COLLECT,"contractCollectHander"));
		flows.add(new FlowEntry(AUDIT, "contractAuditHander"));
		flows.add(new FlowEntry(PAYMENT, "contractPaymentHander"));
		flows.add(new FlowEntry(ACCEPT,"contractAcceptHander"));
		
		flows.add(new FlowEntry(DILVERY,  "contractDilveryHander"));
		//flows.add(new FlowEntry(FINISH, "contractFinishHander")));
		
		flowMaps.put(CONTRACT_KEY+OrderStatus.ACCEPT_ACTION_ORDER, flows);
	}

	/**
	 * 流量卡/充值卡 共同走这流程
	 */
	private  void buildRateCardOrderFlow() {
		
		List<FlowEntry> flows = new ArrayList<FlowEntry>();
		flows.add(new FlowEntry(COLLECT,"rateCardCollectHander"));
		flows.add(new FlowEntry(AUDIT, "rateCardAuditHander"));
		flows.add(new FlowEntry(PAYMENT, "rateCardPaymentHander"));
		flows.add(new FlowEntry(ACCEPT,"rateCardAcceptHander"));
		
		flows.add(new FlowEntry(DILVERY,  "rateCardDilveryHander"));
		//flows.add(new FlowEntry(FINISH, "rateCardFinishHander")));
		flowMaps.put(RATE_CARD_KEY+OrderStatus.ACCEPT_ACTION_ORDER, flows);
	}

	/**
	 * 充值卡 由buildRateCardOrderFlow替换
	 */
	@Deprecated
	private  void buildRechargeCardOrderFlow() {
		List<FlowEntry> flows = new ArrayList<FlowEntry>();
		
		flows.add(new FlowEntry(COLLECT,"rechargeCardCollectHander"));
		flows.add(new FlowEntry(AUDIT, "rechargeCardAuditHander"));
		flows.add(new FlowEntry(PAYMENT, "rechargeCardPaymentHander"));
		flows.add(new FlowEntry(ACCEPT,"rechargeCardAcceptHander"));
		
		flows.add(new FlowEntry(DILVERY,  "rechargeCardDilveryHander"));
		//flows.add(new FlowEntry(FINISH, "rechargeCardFinishHander")));
		flowMaps.put(RECHARGE_CARD_KEY+OrderStatus.ACCEPT_ACTION_ORDER, flows);
	}

	

	public OrderBuilder getOrderBuilder() {
		if(orderBuilder == null)
			orderBuilder = new OrderBuilder();
		return orderBuilder;
	}


	public IAcceptPlugin getAcceptPlugin() {
		return acceptPlugin;
	}


	public void setAcceptPlugin(IAcceptPlugin acceptPlugin) {
		this.acceptPlugin = acceptPlugin;
	}


}
