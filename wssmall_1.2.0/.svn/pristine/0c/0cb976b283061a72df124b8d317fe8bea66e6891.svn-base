package com.powerise.ibss.taglibs;

import com.powerise.ibss.cs.Scsfun;
import com.powerise.ibss.cs.SessionListener;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.jsp.JspException;
import javax.servlet.jsp.JspWriter;
import javax.servlet.jsp.tagext.TagSupport;

import org.apache.log4j.Logger;

import java.util.ArrayList;
import java.util.HashMap;

public class SetTag extends TagSupport {
    
	private String m_name = null;// 变量名称

	private String m_item = null;// 数据条目

	private String m_value = null;// 值

	private String m_from_scope = null;// 值来源scope

	private String m_to_scope = null;// 值保存

	private String m_crypt = null;// 加密版本

	private String m_cond = null;// 条件 格式 `f_name=lgm`tel=13607435681
	
	private String m_default = null;//modified by qin.guoquan 2011-10-18 增加默认值处理
	private static Logger logger = Logger.getLogger(SetTag.class);
	// 此不为空时间，要求有m_item取得的值为ArrayList
	// 同输出的值有m-value指定

	public SetTag() {
		super();
		init();
	}

	public void init() {
		m_item = null;
		m_value = null;
		m_name = null;
		m_to_scope = null;
		m_from_scope = null;
		m_cond = null;
		m_crypt = null;
		m_default = null;
	}

	public void release() {
		init();
	}

	public int doEndTag() throws JspException {
		JspWriter jspWriter = null;
		Object objValue = null;
		Object objTmp = null;
		boolean bValue = false;
		String s_name = null;
		String s_value = null;
		String class_name = null;
		HashMap aHash = null;
		HashMap bHash = null;
		ArrayList aList = null;
		HttpServletRequest _httpRequest = null;
		try {
			_httpRequest = (HttpServletRequest) pageContext.getRequest();
			if (_httpRequest == null)
				return EVAL_PAGE;

			if (m_to_scope == null)
				m_to_scope = "";
			m_to_scope = m_to_scope.trim().toLowerCase();

			if (m_to_scope.equals("ses") || m_to_scope.equals("session")) {
				if (m_value == null) {
					pageContext.getSession().removeAttribute(m_name);
					pageContext.getSession().removeAttribute("listener");
				}
			} else {
				_httpRequest.removeAttribute(m_name);
				pageContext.removeAttribute(m_name);
			}

			if (m_item != null && !m_item.trim().equals("")) {
				bValue = false;
				if (m_item.equals("`IP")) {
					//objValue = _httpRequest.getRemoteAddr();
					objValue = Scsfun.getIpAddr(_httpRequest);
					bValue = true;
				}
				if (m_item.equals("`HOST")) {
					objValue = _httpRequest.getRemoteHost();
					bValue = true;
				}
				if (m_item.equals("`ALL")) {
					objValue = TagFunc.getParamData(pageContext);
					bValue = true;
				}
				if (m_item.startsWith("`SYS-") && !m_item.equals("`SYS-")) {
					s_name = m_item.substring(5);
					s_value = com.powerise.ibss.util.SysSet.getSystemSet(
							"System", s_name, "");
					if (s_value == null || s_value.trim().equals(""))
						s_value = "";
					objValue = s_value;
					bValue = true;
				}
				if (!bValue) {
					objValue = TagFunc.getObject(pageContext, pageContext,
							m_item, m_from_scope);
				}
			} else {
				objValue = m_value;
			}
			
			//modified by qin.guoquan 2011-10-18 增加默认值处理
            if (null != m_default && null == objValue) {
                objValue = m_default;
            }
						
			if (objValue == null)
				return EVAL_PAGE;			
			if (m_cond != null) {
				objTmp = null;
				class_name = objValue.getClass().getName();
				if (m_value != null && class_name.indexOf("ArrayList") > -1) {
					aHash = TagFunc.getValues(m_cond);
					aList = (ArrayList) objValue;
					if (aHash != null) {
						bHash = TagFunc.getFirstValue(aList, aHash);
						if (bHash != null)
							objTmp = (String) bHash.get(m_value);
						aHash.clear();
						aHash = null;
					}
				}
				objValue = objTmp;
			}
			
			//modified by qin.guoquan 2011-10-18 增加默认值处理
			if (null != m_default && null == objValue) {
			    objValue = m_default;
			}
			
			if (objValue == null)
				return EVAL_PAGE;
			
			if (m_crypt != null && !m_crypt.trim().equals("")) {
				// if(objValue instanceof String){
				if (objValue.getClass().getName().indexOf("String") > -1) {
					objValue = TagFunc.crypt((String) objValue, m_crypt);
				}
			}
			if (m_to_scope.equals("") || m_to_scope.equals("req")
					|| m_to_scope.equals("request")) {
				// _httpRequest.setAttribute(m_name,objValue);
				pageContext.setAttribute(m_name, objValue);
			}
			if (m_to_scope.equals("ses") || m_to_scope.equals("session")) {
				pageContext.getSession().setAttribute(m_name, objValue);

				if ((SessionListener) pageContext.getSession().getAttribute(
						"listener") == null)
					pageContext.getSession().setAttribute("listener",
							new SessionListener(m_name, objValue));

				if (m_name.equalsIgnoreCase("user") && objValue!=null) {
					String strLOGIN_NAME = "";

					ArrayList USER_LIST =  (ArrayList) ((HashMap) objValue).get("USER_LIST");
					if (USER_LIST!=null) {
						for (int i=0; i<USER_LIST.size(); i++) {
							strLOGIN_NAME = strLOGIN_NAME + ((HashMap) USER_LIST.get(i)).get("PHONE_NUM") + ",";
						}
					}
				}

			}
		} catch (Exception e) {
			logger.info("执行【SetTag】异常" + e.getMessage());
		} finally {
			init();
		}
		return EVAL_PAGE;
	}

	// 数据条目
	public void setItem(String s_item) {
		if (s_item == null)
			s_item = "";
		this.m_item = s_item.trim();
	}

	// 值
	public void setValue(String s_value) {
		if (s_value == null)
			s_value = "";
		this.m_value = s_value.trim();
	}

	// 缺省值
	public void setVar(String s_name) {
		if (s_name == null)
			s_name = "";
		this.m_name = s_name.trim();
	}

	// 值来源scope
	public void setScope(String s_scope) {
		if (s_scope == null)
			s_scope = "";
		this.m_from_scope = s_scope.trim();
	}

	// 值保存
	public void setToscope(String s_scope) {
		if (s_scope == null)
			s_scope = "";
		this.m_to_scope = s_scope.trim();
	}

	// 条件 格式 `f_name=lgm`tel=13607435681
	public void setCond(String s_cond) {
		this.m_cond = s_cond;
	}

	// 加密版本 算法：简单的字符、位置变换。版本：云南，山东ver=2

	public void setCrypt(String s_crypt) {
		this.m_crypt = s_crypt;
	}
	
	/**
	 * modified by qin.guoquan 2011-10-18 增加默认值处理
	 * @param m_default
	 */
    public void setDefault(String m_default) {
        if (null == m_default) m_default = "";
        this.m_default = m_default;
    }

}
