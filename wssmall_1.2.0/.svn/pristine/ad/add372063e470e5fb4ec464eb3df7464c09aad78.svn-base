package com.ztesoft.net.framework.util;

import static com.ztesoft.net.mall.core.utils.UrlUtils.getParamStringValue;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import java.net.InetAddress;
import java.net.URLDecoder;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang.text.StrSubstitutor;
import org.apache.log4j.Logger;

import utils.GlobalThreadLocalHolder;

import com.ztesoft.net.eop.sdk.context.EopSetting;
import com.ztesoft.net.framework.context.spring.SpringContextHolder;
import com.ztesoft.net.framework.context.webcontext.ThreadContextHolder;
import com.ztesoft.net.framework.database.IDaoSupport;
import com.ztesoft.net.mall.core.consts.Consts;
import com.ztesoft.net.mall.core.utils.UrlUtils;
//import com.powerise.ibss.util.DBTUtil;

/**
 * 字串工具类
 * 
 * @author kingapex 2010-1-6下午01:52:58
 */
public class StringUtil {
	private static Logger logger = Logger.getLogger(StringUtil.class);
	private static final String localIpAddress = System.getProperty("LOCAL_HOST_IP");
	private StringUtil() {
	}

	/**
	 * 将一个Double转为int的String，将省略小数点后面的值
	 * 
	 * @param d
	 * @return
	 */
	public static String doubleToIntString(Double d) {
		int value = ((Double) d).intValue();
		return String.valueOf(value);
	}

	/**
	 * 检查浮点数
	 * 
	 * @param num
	 * @param type
	 *            "0+":非负浮点数 "+":正浮点数 "-0":非正浮点数 "-":负浮点数 "":浮点数
	 * @return
	 */
	public static boolean checkFloat(String num, String type) {
		String eL = "";
		if (type.equals("0+"))
			eL = "^\\d+(\\.\\d+)?$";// 非负浮点数
		else if (type.equals("+"))
			eL = "^((\\d+\\.\\d*[1-9]\\d*)|(\\d*[1-9]\\d*\\.\\d+)|(\\d*[1-9]\\d*))$";// 正浮点数
		else if (type.equals("-0"))
			eL = "^((-\\d+(\\.\\d+)?)|(0+(\\.0+)?))$";// 非正浮点数
		else if (type.equals("-"))
			eL = "^(-((\\d+\\.\\d*[1-9]\\d*)|(\\d*[1-9]\\d*\\.\\d+)|(\\d*[1-9]\\d*)))$";// 负浮点数
		else
			eL = "^(-?\\d+)(\\.\\d+)?$";// 浮点数
		Pattern p = Pattern.compile(eL);
		Matcher m = p.matcher(num);
		boolean b = m.matches();
		return b;
	}

	/**
	 * 检测某字串是否存在某数组中
	 * 
	 * @param value
	 * @param array
	 * @return 存在返回真，不存在返回假
	 */
	public static boolean isInArray(String value, String[] array) {
		if (array == null)
			return false;
		for (String v : array) {
			if (v.equals(value))
				return true;
		}
		return false;

	}

	public static boolean isInArray(int value, String[] array) {
		if (array == null)
			return false;
		for (String v : array) {
			if (Integer.valueOf(v).intValue() == value)
				return true;
		}
		return false;
	}

	
	
	/**
	 * 将数组成str连接成字符串
	 * 
	 * @param str
	 * @param array
	 * @return
	 */
	public static String implode(String str, Object[] array) {
		if (str == null || array == null) {
			return "";
		}
		String result = "";
		for (int i = 0; i < array.length; i++) {
			if (i == array.length - 1) {
				result += array[i].toString();
			} else {
				result += array[i].toString() + str;
			}
		}
		return result;
	}

	public static String implodeValue(String str, Object[] array) {
		if (str == null || array == null) {
			return "";
		}
		String result = "";
		for (int i = 0; i < array.length; i++) {
			if (i == array.length - 1) {
				result += "?";
			} else {
				result += "?" + str;
			}
		}
		return result;
	}
	
	
	public static String implodeValue(String str, Object[] array,Object[] cols ,Map<String,String>  sysDateMap,Map<String,String>  clobMap) {
		if (str == null || array == null) {
			return "";
		}
		String result = "";
		for (int i = 0; i < cols.length; i++) {
			String value  = "?";
			if(!StringUtil.isEmpty(sysDateMap.get(i+"")))
				value = "sysdate";
			//	value = DBTUtil.current();//"sysdate";
			String type = clobMap.get(i+"");
			if(!StringUtil.isEmpty(type)){
				if("blob".equalsIgnoreCase(type)){
					value = "#empty_blob";
				}else{
					value = "#empty_clob";
				}
			}
			if (i == cols.length - 1) {
				result += value;
			} else {
				result +=value + str;
			}
		}
		return result;
	}
	
	/**
	 * MD5加密方法
	 * 
	 * @param str
	 *            String
	 * @return String
	 */
	public static String md5(String str) {
		MessageDigest messageDigest = null;
		try {
			messageDigest = MessageDigest.getInstance("MD5");
		} catch (NoSuchAlgorithmException ex) {
			ex.printStackTrace();
			return null;
		}
		byte[] resultByte = messageDigest.digest(str.getBytes());
		StringBuffer result = new StringBuffer();
		for (int i = 0; i < resultByte.length; ++i) {
			result.append(Integer.toHexString(0xFF & resultByte[i]));
		}
		return result.toString();
	}

	/**
	 * 验证Email地址是否有效
	 * 
	 * @param sEmail
	 * @return
	 */
	public static boolean validEmail(String sEmail) {
		String pattern = "^([a-z0-9A-Z]+[-|\\.|_]?)+[a-z0-9A-Z]@([a-z0-9A-Z]+(-[a-z0-9A-Z]+)?\\.)+[a-zA-Z]{2,}$";
		return sEmail.matches(pattern);
	}

	/**
	 * 验证字符最大长度
	 * 
	 * @param str
	 * @return
	 */
	public static boolean validMaxLen(String str, int length) {
		if (str == null && str.equals("")) {
			return false;
		}
		if (str.length() > length) {
			return false;
		} else {
			return true;
		}
	}

	/**
	 * 验证字符最小长度
	 * 
	 * @param str
	 * @return
	 */
	public static boolean validMinLen(String str, int length) {
		if (str == null && str.equals("")) {
			return false;
		}
		if (str.length() < length) {
			return false;
		} else {
			return true;
		}
	}

	/**
	 * 验证一个字符串是否为空
	 * 
	 * @param str
	 * @return 如果为空返回真，如果不为空返回假
	 */

	public static boolean isEmpty(String str) {
		if (str == null || "".equals(str))
			return true;

		String pattern = "\\S";
		Pattern p = Pattern.compile(pattern, 2 | Pattern.DOTALL);
		Matcher m = p.matcher(str);
		return !m.find();
	}

	/**
	 * 验证两个字符串是否相等且不能为空
	 * 
	 * @param str1
	 * @param str2
	 * @return
	 */
	public static boolean equals(String str1, String str2) {
		if (str1 == null || str1.equals("") || str2 == null || str2.equals("")) {
			return false;
		}
		return str1.equals(str2);
	}

	/**
	 * 将字串转为数字
	 * 
	 * @param str
	 * @param checked如果为treu格式不正确抛出异常
	 * @return
	 */
	public static int toInt(String str, boolean checked) {
		int value = 0;
		if (str == null || str.equals("")) {
			return 0;
		}
		try {
			value = Integer.parseInt(str);
		} catch (Exception ex) {
			if (checked) {
				throw new RuntimeException("整型数字格式不正确");
			} else {
				return 0;
			}
		}
		return value;
	}

	/**
	 * 将字符型转为Int型
	 * 
	 * @param str
	 * @return
	 */
	@Deprecated
	public static int toInt(String str) {
		int value = 0;
		if (str == null || str.equals("")) {
			return 0;
		}
		try {
			value = Integer.parseInt(str);
		} catch (Exception ex) {
			value = 0;
			ex.printStackTrace();
		}
		return value;
	}

	@Deprecated
	public static Double toDouble(String str) {
		Double value = 0d;
		if (str == null || str.equals("")) {
			return 0d;
		}
		try {
			value = Double.valueOf(str);
		} catch (Exception ex) {
			value = 0d;
			// ex.printStackTrace();
		}
		return value;
	}

	/**
	 * 将一个字串转为double
	 * 
	 * @param str
	 * @param checked如果为treu格式不正确抛出异常
	 * @return
	 */
	public static Double toDouble(String str, boolean checked) {
		Double value = 0d;
		if (str == null || str.equals("")) {
			return 0d;
		}
		try {
			value = Double.valueOf(str);
		} catch (Exception ex) {
			if (checked)
				throw new RuntimeException("数字格式不正确");
			else
				return 0D;
		}
		return value;
	}

	/**
	 * 把数组转换成String
	 * 
	 * @param array
	 * @return
	 */
	public static String arrayToString(Object[] array, String split) {
		if (array == null) {
			return "";
		}
		String str = "";
		for (int i = 0; i < array.length; i++) {
			if (i != array.length - 1) {
				str += array[i].toString() + split;
			} else {
				str += array[i].toString();
			}
		}
		return str;
	}

	/**
	 * 将一个list转为以split分隔的string
	 * 
	 * @param list
	 * @param split
	 * @return
	 */
	public static String listToString(List list, String split) {
		if (list == null || list.isEmpty())
			return "";
		StringBuffer sb = new StringBuffer();
		for (Object obj : list) {
			if (sb.length() != 0) {
				sb.append(split);
			}
			sb.append(obj.toString());
		}
		return sb.toString();
	}

	/**
	 * 得到WEB-INF的绝对路径
	 * 
	 * @return
	 */
	public static String getWebInfPath() {
		String filePath = Thread.currentThread().getContextClassLoader()
				.getResource("").toString();
		if (filePath.toLowerCase().indexOf("file:") > -1) {
			filePath = filePath.substring(6, filePath.length());
		}
		if (filePath.toLowerCase().indexOf("classes") > -1) {
			filePath = filePath.replaceAll("/classes", "");
		}
		if (System.getProperty("os.name").toLowerCase().indexOf("window") < 0) {
			filePath = "/" + filePath;
		}
		if (!filePath.endsWith("/"))
			filePath += "/";
		return filePath;
	}

	/**
	 * 得到根目录绝对路径(不包含WEB-INF)
	 * 
	 * @return
	 */
	public static String getRootPath() {
		// return "E:/javatool/apache-tomcat-6.0.18/webapps/user_test";
		String filePath = Thread.currentThread().getContextClassLoader()
				.getResource("").toString();
		if (filePath.toLowerCase().indexOf("file:") > -1) {
			filePath = filePath.substring(6, filePath.length());
		}
		if (filePath.toLowerCase().indexOf("classes") > -1) {
			filePath = filePath.replaceAll("/classes", "");
		}
		if (filePath.toLowerCase().indexOf("web-inf") > -1) {
			filePath = filePath.substring(0, filePath.length() - 9);
		}
		if (System.getProperty("os.name").toLowerCase().indexOf("window") < 0) {
			filePath = "/" + filePath;
		}

		if (filePath.endsWith("/"))
			filePath = filePath.substring(0, filePath.length() - 1);

		return filePath;
	}

	public static String getRootPath(String resource) {
		String filePath = Thread.currentThread().getContextClassLoader()
				.getResource(resource).toString();
		if (filePath.toLowerCase().indexOf("file:") > -1) {
			filePath = filePath.substring(6, filePath.length());
		}
		// if (filePath.toLowerCase().indexOf("classes") > -1) {
		// filePath = filePath.replaceAll("/classes", "");
		// }
		// if (filePath.toLowerCase().indexOf("web-inf") > -1) {
		// filePath = filePath.substring(0, filePath.length() - 9);
		// }
		if (System.getProperty("os.name").toLowerCase().indexOf("window") < 0) {
			filePath = "/" + filePath;
		}
		if (!filePath.endsWith("/"))
			filePath += "/";

		return filePath;
	}

	/**
	 * 格式化页码
	 * 
	 * @param page
	 * @return
	 */
	public static int formatPage(String page) {
		int iPage = 1;
		if (page == null || page.equals("")) {
			return iPage;
		}
		try {
			iPage = Integer.parseInt(page);
		} catch (Exception ex) {
			iPage = 1;
		}
		return iPage;
	}

	/**
	 * 将计量单位字节转换为相应单位
	 * 
	 * @param size
	 * @return
	 */
	public static String getFileSize(String fileSize) {
		String temp = "";
		DecimalFormat df = new DecimalFormat("0.00");
		double dbFileSize = Double.parseDouble(fileSize);
		if (dbFileSize >= 1024) {
			if (dbFileSize >= 1048576) {
				if (dbFileSize >= 1073741824) {
					temp = df.format(dbFileSize / 1024 / 1024 / 1024) + " GB";
				} else {
					temp = df.format(dbFileSize / 1024 / 1024) + " MB";
				}
			} else {
				temp = df.format(dbFileSize / 1024) + " KB";
			}
		} else {
			temp = df.format(dbFileSize / 1024) + " KB";
		}
		return temp;
	}

	/**
	 * 得到一个32位随机字符
	 * 
	 * @return
	 */
	public static String getEntry() {
		Random random = new Random(100);
		Date now = new Date();
		SimpleDateFormat formatter = new SimpleDateFormat(new String(
				"yyyyMMddHHmmssS"));
		return md5(formatter.format(now) + random.nextDouble());
	}

	/**
	 * 将中文汉字转成UTF8编码
	 * 
	 * @param str
	 * @return
	 */
	public static String toUTF8(String str) {
		if (str == null || str.equals("")) {
			return "";
		}
		try {
			return new String(str.getBytes("ISO8859-1"), "UTF-8");
		} catch (Exception ex) {
			ex.printStackTrace();
			return "";
		}
	}

	public static String to(String str, String charset) {
		if (str == null || str.equals("")) {
			return "";
		}
		try {
			return new String(str.getBytes("ISO8859-1"), charset);
		} catch (Exception ex) {
			ex.printStackTrace();
			return "";
		}
	}

	public static String getRandStr(int n) {
		Random random = new Random();
		String sRand = "";
		for (int i = 0; i < n; i++) {
			String rand = String.valueOf(random.nextInt(10));
			sRand += rand;
		}
		return sRand;
	}

	/**
	 * 得到一个数字的大写(一到十之内)
	 * 
	 * @param num
	 * @return
	 */
	public static String getChineseNum(int num) {
		String[] chineseNum = new String[] { "一", "二", "三", "四", "五", "六", "七",
				"八", "九", "十" };
		return chineseNum[num];
	}

	public static String replaceEnter(String str) {
		if (str == null)
			return null;
		return str.replaceAll("\r", "").replaceAll("\n", "");
	}

	public static String replaceAll(String source, String target, String content) {
		StringBuffer buffer = new StringBuffer(source);
		int start = buffer.indexOf(target);
		if (start > 0) {
			source = buffer.replace(start, start + target.length(), content)
					.toString();
		}
		return source;
	}

	/**
	 * 去除HTML 元素
	 * 
	 * @param element
	 * @return
	 */
	public static String getTxtWithoutHTMLElement(String element) {
		if (null == element || "".equals(element.trim())) {
			return element;
		}

		Pattern pattern = Pattern.compile("<[^<|^>]*>");
		Matcher matcher = pattern.matcher(element);
		StringBuffer txt = new StringBuffer();
		while (matcher.find()) {
			String group = matcher.group();
			if (group.matches("<[\\s]*>")) {
				matcher.appendReplacement(txt, group);
			} else {
				matcher.appendReplacement(txt, "");
			}
		}
		matcher.appendTail(txt);
		String temp = txt.toString().replaceAll("\n", "");
		temp = temp.replaceAll(" ", "");
		return temp;
	}

	/**
	 * clear trim to String
	 * 
	 * @return
	 */
	public static String toTrim(String strtrim) {
		if (null != strtrim && !strtrim.equals("")) {
			return strtrim.trim();
		}
		return "";
	}

	/**
	 * 转义字串的$
	 * 
	 * @param str
	 * @return
	 */
	public static String filterDollarStr(String str) {
		String sReturn = "";
		if (!toTrim(str).equals("")) {
			if (str.indexOf('$', 0) > -1) {
				while (str.length() > 0) {
					if (str.indexOf('$', 0) > -1) {
						sReturn += str.subSequence(0, str.indexOf('$', 0));
						sReturn += "\\$";
						str = str.substring(str.indexOf('$', 0) + 1,
								str.length());
					} else {
						sReturn += str;
						str = "";
					}
				}

			} else {
				sReturn = str;
			}
		}
		return sReturn;
	}

	public static String compressHtml(String html) {
		if (html == null)
			return null;

		html = html.replaceAll("[\\t\\n\\f\\r]", "");
		return html;
	}

	public static String toCurrency(Double d) {
		if (d != null) {
			DecimalFormat df = new DecimalFormat("￥#,###.00");
			return df.format(d);
		}
		return "";
	}

	public static String toString(Integer i) {
		if (i != null) {
			return String.valueOf(i);
		}
		return "";
	}

	public static String toString(Double d) {
		if (null != d) {
			return String.valueOf(d);
		}
		return "";
	}

	public static String getRandom() {
		int[] array = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		Random rand = new Random();
		for (int i = 10; i > 1; i--) {
			int index = rand.nextInt(i);
			int tmp = array[index];
			array[index] = array[i - 1];
			array[i - 1] = tmp;
		}
		int result = 0;
		for (int i = 0; i < 6; i++)
			result = result * 10 + array[i];

		return "" + result;
	}

	/**
	 * 处理树型码 获取本级别最大的code 如:301000 返回301999
	 * 
	 * @param code
	 * @return
	 */
	public static int getMaxLevelCode(int code) {
		String codeStr = "" + code;
		StringBuffer str = new StringBuffer();
		boolean flag = true;
		for (int i = codeStr.length() - 1; i >= 0; i--) {
			char c = codeStr.charAt(i);
			if (c == '0' && flag) {
				str.insert(0, '9');
			} else {
				str.insert(0, c);
				flag = false;
			}
		}
		return Integer.valueOf(str.toString());
	}

	/**
	 * 去掉sql的注释
	 */
	public static String delSqlComment(String content) {
		String pattern = "/\\*(.|[\r\n])*?\\*/";
		Pattern p = Pattern.compile(pattern, 2 | Pattern.DOTALL);
		Matcher m = p.matcher(content);
		if (m.find()) {
			content = m.replaceAll("");
		}
		return content;
	}

	public static String inputStream2String(InputStream is) {
		BufferedReader in = new BufferedReader(new InputStreamReader(is));
		StringBuffer buffer = new StringBuffer();
		String line = "";
		try {
			while ((line = in.readLine()) != null) {
				buffer.append(line);
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		return buffer.toString();
	}

	public static String decode(String keyword) {
		try {
			keyword = URLDecoder.decode(keyword, "UTF-8");
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}

		return keyword;
	}

	/**
	 * 进行解析
	 * 
	 * @param regex
	 * @param rpstr
	 * @param source
	 * @return
	 */
	public static String doFilter(String regex, String rpstr, String source) {
		Pattern p = Pattern.compile(regex, 2 | Pattern.DOTALL);
		Matcher m = p.matcher(source);
		return m.replaceAll(rpstr);
	}

	/**
	 * 脚本过滤
	 * 
	 * @param source
	 * @return
	 */
	public static String formatScript(String source) {
		source = source.replaceAll("javascript", "&#106avascript");
		source = source.replaceAll("jscript:", "&#106script:");
		source = source.replaceAll("js:", "&#106s:");
		source = source.replaceAll("value", "&#118alue");
		source = source.replaceAll("about:", "about&#58");
		source = source.replaceAll("file:", "file&#58");
		source = source.replaceAll("document.cookie", "documents&#46cookie");
		source = source.replaceAll("vbscript:", "&#118bscript:");
		source = source.replaceAll("vbs:", "&#118bs:");
		source = doFilter("(on(mouse|exit|error|click|key))", "&#111n$2",
				source);
		return source;
	}

	/**
	 * 格式化HTML代码
	 * 
	 * @param htmlContent
	 * @return
	 */
	public static String htmlDecode(String htmlContent) {
		htmlContent = formatScript(htmlContent);
		htmlContent = htmlContent.replaceAll(" ", "&nbsp;")
				.replaceAll("<", "&lt;").replaceAll(">", "&gt;")
				.replaceAll("\n\r", "<br>").replaceAll("\r\n", "<br>")
				.replaceAll("\r", "<br>");
		return htmlContent;
	}

	/**
	 * 动态添加表前缀，对没有前缀的表增加前缀
	 * 
	 * @param table
	 * @param prefix
	 * @return
	 */
	public static String addPrefix(String table, String prefix) {
		String result = "";
		if (table.length() > prefix.length()) {
			if (table.substring(0, prefix.length()).toLowerCase()
					.equals(prefix.toLowerCase()))
				result = table;
			else
				result = prefix + table;
		} else
			result = prefix + table;

		return result;
	}
	
	
	public static boolean isMobile() {
		
		/*HttpServletRequest request = ThreadContextHolder.getHttpRequest();
		if(StringUtil.isEmpty((String)request.getSession().getAttribute("theme")))
			request.getSession().setAttribute("theme","default"); //add by wui 为空默认为手机
		if("mobile".equals(request.getSession().getAttribute("theme"))){
			return true;
		}*/
		return false;
	}
	
	
	public static String getSessionId() {
		String session_id = GlobalThreadLocalHolder.getInstance().getUUID();
		return session_id;
	}
	
	public static String dealAccStr(String acc_nbr ) {
		StringBuffer t_accnbr =new StringBuffer();
		if(!StringUtil.isEmpty(acc_nbr)){
			String accNbr [] = acc_nbr.split(",");
			for (int i = 0; i < accNbr.length; i++) {
				t_accnbr.append(accNbr[i]);
			}
			return t_accnbr.toString().replace(" ", "");
		}
		return "";
		
	}
	//获取商户id
	public static String getAgnId() {
		HttpServletRequest request = ThreadContextHolder.getHttpRequest();
				
		String url =request.getRequestURI();
				
		if(url.indexOf(ThreadContextHolder.getHttpRequest().getContextPath())>-1)
			url =url.substring(url.indexOf(ThreadContextHolder.getHttpRequest().getContextPath())+ThreadContextHolder.getHttpRequest().getContextPath().length());
		
		
		
		String p= UrlUtils.getParamStr(url);
		try { //add by wui 中文编码转换
			 p= new String(p.getBytes("iso8859-1"),"UTF-8");
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		
		String agn =  getParamStringValue(p, "agn");
		return agn;
		
	}
	
	public static String getThemePath() {
		HttpServletRequest request = ThreadContextHolder.getHttpRequest();
		if(request == null)
			return "default";
		String path =  (String)request.getSession().getAttribute("theme");
		if(StringUtil.isEmpty(path))
			path ="default";
			return path;
	}
	
	public static String getIpAddr(){
		
		   	HttpServletRequest request = (HttpServletRequest)ThreadContextHolder.getHttpRequest();
		   	String ip = request.getHeader("X-Forwarded-For");
			if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
				ip = request.getHeader("Proxy-Client-IP");
			}
			if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
				ip = request.getHeader("WL-Proxy-Client-IP");
			}
			if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
				ip = request.getRemoteAddr();
			}
			if(ip != null && ip.length() != 0 &&!"unknown".equalsIgnoreCase(ip)&&"127.0.0.1".equals(ip)){	
				try {
					InetAddress iaClient = InetAddress.getLocalHost();
					ip = iaClient.getHostAddress();
				} catch (Exception e) {
					e.printStackTrace();
					throw new RuntimeException("获取Ip失败");
				}
				
			}
			// 如果是多级代理的话,通过x-forwarded-for可能返回多个IP的现象,这里我始终取第一个有效的IP
			return ip.split(",")[0];
	}
	
	/**
	 * 元转分
	 * @param amount
	 * @return
	 */
	/**
	 * 获取本地网ip
	 * @return
	 */
	public static String getLocalIpAddress() {
			if(isEmpty(localIpAddress)){
				logger.info("请尽快配置本机内网IP地址LOCAL_HOST_IP的启动参数.............");
				throw new RuntimeException("获取内网ip失败，请尽快配置本机内网IP地址LOCAL_HOST_IP的启动参数" );
			}
		return localIpAddress;
	}
	
	
	public  static String getContextPort() {
		//String port = System.getProperty(Consts.PORT_SYS_PROP+System.getProperty("timer_port"));
		String portSysProp = System.getProperty(Consts.PORT_SYS_PROP);
		if (portSysProp == null) {
			initPortSystemProperty();
		}
		String post_sys_prop = System.getProperty(Consts.PORT_SYS_PROP);
		if(StringUtil.isEmpty(post_sys_prop))
			post_sys_prop ="";
		//logger.info("返回的本机端口"+post_sys_prop);
		return post_sys_prop;
	}
	
	public static int transMoney(int amount){
		
		 BigDecimal b1 = new BigDecimal(amount + "");
		 BigDecimal b2 = new BigDecimal("100");
		 String strOrderAmount = b1.multiply(b2).setScale(0).toString();
		 return Integer.parseInt(strOrderAmount);
	 }
	
	public static int transMoneyD(Double amount){
		
		 BigDecimal b1 = new BigDecimal(amount + "");
		 BigDecimal b2 = new BigDecimal("100");
		 String strOrderAmount = b1.multiply(b2).setScale(0).toString();
		 return Integer.parseInt(strOrderAmount);
	}
	
	/**
	 * transMoneyToYuan 如果钱存在毛的情况，会出现钱数丢失危险。
	 * @param amount
	 * @return
	 */
	public static int transMoneyToYuan(int amount){
		
		 return amount/100;
	}
	
	public static String getCurrentTime(){
		/*IDaoSupport daoSupport =  (IDaoSupport)SpringContextHolder.getBean("daoSupport");
		String sql = "select to_char(sysdate,'yyyy-mm-dd hh24:mi:ss')tansdate from dual";*/
		DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		return df.format(new Date());//daoSupport.queryForString(sql);
	}
	
	public static String getTransDate(){
		/*IDaoSupport daoSupport =  (IDaoSupport)SpringContextHolder.getBean("daoSupport");
		String sql = "select to_char(sysdate,'yyyymmddhh24miss')tansdate from dual";*/
		DateFormat df = new SimpleDateFormat("yyyyMMddHHmmss");
		return df.format(new Date());//return daoSupport.queryForString(sql);
	}
	
	public static String getLanName(String lan_id){
		
		IDaoSupport daoSupport =  (IDaoSupport)SpringContextHolder.getBean("daoSupport");
		String sql = "select lan_name from es_lan where lan_id = '" + lan_id + "'";
		return daoSupport.queryForString(sql);
	}
	
	/**
	 * @param format 格式化字符串 使用 %() 占位符
	 * @param map
	 * @return
	 */
	public static String format(String format, Map<String, Object> map) {
		if (isEmpty(format)) {
			throw new RuntimeException("format can not be empty");
		}
		StrSubstitutor sub = new StrSubstitutor(map, "%(", ")");
		String result = sub.replace(format);
		return result;
	}
	
	public static  String transToDate(String transDate){
		if(transDate.length() == 14){
			transDate = transDate.substring(0, 4) + "-" + transDate.substring(4, 6) + "-" +
			transDate.substring(6, 8) + " " + transDate.substring(8, 10) + ":" +
			transDate.substring(10, 12) + ":" + transDate.substring(12, 14);
		}else {
			throw new RuntimeException("时间格式不正确");
		}
		return transDate;
	}
	
	/**
	 * 将xml串转换为Map结构
	 * @author pzh
	 * @param xmlStr 报文串
	 * @param xmlMapperStr  报文转换模板
	 * @return
	 */
	/*public static Map xmlToMap(String xmlStr, String xmlMapperStr) {
		Map retMap = new HashMap();
		try {
			MapperContext mapperCtx = new MapperContextBuilder().build(xmlMapperStr);
			Document resultDoc = DomUtils.newDocument(xmlStr, true); // resultStr.getAsDocument();
			Template tempTransformTemplate = TemplateUtils.createTemplate(xmlStr);
			
			Map rootMap = new HashMap();
			rootMap.put("doc", NodeModel.wrap(resultDoc));
			
			TemplateUtils.addUtils(rootMap);
			StringWriter out = new StringWriter();
			tempTransformTemplate.process(rootMap, out);
			xmlStr = out.toString();
			XStream xstream = XStream.instance(); 		
			retMap = (Map)xstream.fromXML(xmlStr, mapperCtx);
			
		} catch (Exception e) {
			e.printStackTrace();
			throw new RuntimeException("报文解析出错：" + e.getMessage());
		}
		return retMap;
	}*/
	

	public static void main(String[] args) throws UnsupportedEncodingException {
		logger.info(getLocalIpAddress());
		/*ManagerUtils.timeMatch("wssquery-2.html");
		// logger.info(
		// to("<body>´íÎóÐÅϢ:[ÄúÎÞȨ·ÃÎÊ,ÇëÓë¹ÜÀíԱÁªϵ.]</body>","GBk") );
		// logger.info(getMaxLevelCode(300000));

		// String str = new
		// BASE64Encoder().encode("search-cat{3}keyword{板材}brand{80}prop{1_1,0_1}mate{0}color{1}price{100-300}.html".getBytes());
		// logger.info(str);
//		String rd = "" + System.currentTimeMillis();
//		String str = StringUtil.md5(rd).substring(0, 22);
//
//		logger.info(str);
		String format = "尊敬的%(username)分销商用户，您购买的%(goods_name)可用库存为%(stock_num)，超出预警划值最大限制%(limit_stock)，请及时进货.";
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("username", "陈先生");
		map.put("goods_name", "乐享云卡");
		map.put("stock_num", 100);
		map.put("limit_stock", 1000);
		logger.info(format(format, map));
		
		transMoneyToYuan(123456);
		
        logger.info(getLocalIpAddress());	
		
        logger.info(getLocalIpAddress());	
        
		String rootUrl = "http://localhost:" + Consts.SCHEDULER_SERVER_PORT + "/wssmall";
		try {
			HttpURLConnection connection = (HttpURLConnection) new URL(rootUrl).openConnection();
			connection.setReadTimeout(4000); //4秒超时
			connection.setRequestMethod("GET");
			connection.connect();	
			int http_status =	connection.getResponseCode();
			logger.info("Request URL : " + rootUrl + " status Code " + http_status);
		} catch (UnknownHostException e) {
			     
		} catch (IOException e) {
			
		}*/
		
	}
	
	/**
	 * 发起一次get请求 让com.enation.eop.processor.DispatcherFilter 把端口号设置在System的属性中
	 */
	public static void initPortSystemProperty() {
		String timer_port = System.getProperty("timer_port"); //add  by wui运行端口
		String rootUrl = "http://localhost:" + timer_port +  EopSetting.CONTEXT_PATH+"router";
		HttpClientUtils httpClient = new HttpClientUtils();
		try {
			//logger.info("开始请求"+timer_port);
			httpClient.getResult(rootUrl, "a", null);
			String post_sys_prop = System.getProperty(Consts.PORT_SYS_PROP);
			logger.info("定时任务端口初始化完毕，设置进去的端口："+post_sys_prop);
		} catch (Exception e) {
			//e.printStackTrace();
		}
	
	}
	
}
