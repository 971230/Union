package net.sf.ehcache.util;

import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.net.InetAddress;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.util.Properties;
import java.util.TimerTask;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class UpdateChecker extends TimerTask
{
  private static final Logger LOG = LoggerFactory.getLogger(UpdateChecker.class.getName());
  private static final long MILLIS_PER_SECOND = 1000L;
  private static final String NOT_AVAILABLE = "UNKNOWN";
  private static final String UPDATE_CHECK_URL = "http://www.terracotta.org/kit/reflector?kitID=ehcache.default&pageID=update.properties";
  private static final long START_TIME = System.currentTimeMillis();

  public void run()
  {
    checkForUpdate();
  }

  public void checkForUpdate()
  {
    try
    {
      if (!(Boolean.getBoolean("net.sf.ehcache.skipUpdateCheck")))
        doCheck();
    }
    catch (Throwable t) {
      LOG.debug("Update check failed: " + t.toString());
    }
  }

  private void doCheck() throws IOException {
	  
//    LOG.debug("Checking for update...");
//    URL updateUrl = buildUpdateCheckUrl();
//    Properties updateProps = getUpdateProperties(updateUrl);
//    String currentVersion = new ProductInfo().getVersion();
//    String propVal = updateProps.getProperty("general.notice");
//    if (notBlank(propVal)) {
//      LOG.info(propVal);
//    }
//    propVal = updateProps.getProperty(currentVersion + ".notice");
//    if (notBlank(propVal)) {
//      LOG.info(propVal);
//    }
//    propVal = updateProps.getProperty(currentVersion + ".updates");
//    if (notBlank(propVal)) {
//      StringBuilder sb = new StringBuilder();
//      String[] newVersions = propVal.split(",");
//      for (int i = 0; i < newVersions.length; ++i) {
//        String newVersion = newVersions[i].trim();
//        if (i > 0) {
//          sb.append(", ");
//        }
//        sb.append(newVersion);
//        propVal = updateProps.getProperty(newVersion + ".release-notes");
//        if (notBlank(propVal)) {
//          sb.append(" [");
//          sb.append(propVal);
//          sb.append("]");
//        }
//      }
//      if (sb.length() > 0)
//        LOG.info("New update(s) found: " + sb.toString());
//    }
//    else {
//      LOG.debug("No update found.");
//    }
  }

  private Properties getUpdateProperties(URL updateUrl) throws IOException {
    URLConnection connection = updateUrl.openConnection();
    InputStream in = connection.getInputStream();
    try {
      Properties props = new Properties();
      props.load(connection.getInputStream());
      Properties localProperties1 = props;

      return localProperties1;
    }
    finally
    {
      if (in != null)
        in.close();
    }
  }

  private URL buildUpdateCheckUrl() throws MalformedURLException, UnsupportedEncodingException
  {
    String url = System.getProperty("ehcache.update-check.url", "http://www.terracotta.org/kit/reflector?kitID=ehcache.default&pageID=update.properties");
    String connector = (url.indexOf(63) > 0) ? "&" : "?";
    return new URL(url + connector + buildParamsString());
  }

  private String buildParamsString() throws UnsupportedEncodingException {
    ProductInfo productInfo = new ProductInfo();
    StringBuilder sb = new StringBuilder();
    sb.append("id=");
    sb.append(getClientId());
    sb.append("&os-name=");
    sb.append(urlEncode(getProperty("os.name")));
    sb.append("&jvm-name=");
    sb.append(urlEncode(getProperty("java.vm.name")));
    sb.append("&jvm-version=");
    sb.append(urlEncode(getProperty("java.version")));
    sb.append("&platform=");
    sb.append(urlEncode(getProperty("os.arch")));
    sb.append("&tc-version=");
    sb.append("UNKNOWN");
    sb.append("&tc-product=");
    sb.append(urlEncode(productInfo.getName() + " " + productInfo.getVersion()));
    sb.append("&source=");
    sb.append(urlEncode(productInfo.getName()));
    sb.append("&uptime-secs=");
    sb.append(getUptimeInSeconds());
    sb.append("&patch=");
    sb.append(urlEncode(productInfo.getPatchLevel()));
    return sb.toString();
  }

  private long getUptimeInSeconds() {
    long uptime = System.currentTimeMillis() - START_TIME;
    return ((uptime > 0L) ? uptime / 1000L : 0L);
  }

  private int getClientId() {
    try {
      return InetAddress.getLocalHost().hashCode(); } catch (Throwable t) {
    }
    return 0;
  }

  private String urlEncode(String param) throws UnsupportedEncodingException
  {
    return URLEncoder.encode(param, "UTF-8");
  }

  private String getProperty(String prop) {
    return System.getProperty(prop, "UNKNOWN");
  }

  private boolean notBlank(String s) {
    return ((s != null) && (s.trim().length() > 0));
  }
}