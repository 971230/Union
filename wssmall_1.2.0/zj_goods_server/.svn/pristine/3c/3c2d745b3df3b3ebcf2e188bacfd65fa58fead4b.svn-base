package com.ztesoft.net.outter.inf.service;
/**
 * @author vancof
 * 		解析总部基础数据并入库，总部基础数据存放在指定路径下的xml文件中，
 * 以数据类型的拼音结尾作为区分标准，例如产品为XXCP.xml。
 * 		商品系统通过定时任务扫描目录下的文件进行入库操作
 * 
 * */

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;
import javax.management.RuntimeErrorException;

import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;

import com.powerise.ibss.util.DBTUtil;
import com.ztesoft.common.util.StringUtils;
import com.ztesoft.net.eop.sdk.database.BaseSupport;
import com.ztesoft.net.mall.core.model.Goods;
import com.ztesoft.net.mall.core.model.Product;
import com.ztesoft.net.mall.core.service.IGoodsManager;
import com.ztesoft.net.mall.core.utils.ManagerUtils;
import com.ztesoft.net.outter.inf.iservice.IGoodsXmlParseManager;
import com.ztesoft.net.outter.inf.model.ProductElement;

public class GoodsXmlParseManager extends BaseSupport  implements IGoodsXmlParseManager {
	
//	@Resource
//	private IGoodsManager goodsManager;
	
	private String xmlPath="";			//解析基础数据的路径
	private String dataType="";		//解析数据类型
	private String totalNum="";		//解析数据总数
	private int errorCount=0;
	private int successCount;
	private String upLoadTime="";	//总部上传数据的时间
	private List dataList;					//解析后的数据列表
	private List inList;							//待入库列表
	private ProductElement productElement;		//产品解析实体类
	
	private Goods goods;			//商品入库对象
	private Product product;		//货品入库对象
	
	private String cat_id;
	private String model_code;
	private String params;
	
	public void parse() {
		// TODO 总部基础数据解析
		String sql="select field_value form es_mall_config where field_name=? and rownum<2";
		xmlPath=this.baseDaoSupport.queryForString(sql,"xmlPath");
		xmlPath="E:\\xml";
		if(!StringUtils.isEmpty(xmlPath)){
			File dir=new File(xmlPath);
			if(dir.exists()){
				File[] files=dir.listFiles();
				for(File file:files){
					if(file.getName().endsWith("CP.xml")){//套餐产品解析
						try{
							this.parseCP(file);
							this.moveFile(file);
						}catch(Exception e){
							//操作失败的文件的记录
							String sqlFileError="insert into es_xml_parse_logs(log_id,file_name,file_path,create_time,total_num,success_num,data_type,file_type,"+
									" result_desc,result,source_from)values(seqxmlparse.nextval, ?, ?, sysdate, ?, ?, ?, ?, ?, ?, '"+ManagerUtils.getSourceFrom()+"')";
							this.baseDaoSupport.execute(sqlFileError,file.getName(),file.getPath(),totalNum,"",dataType,"CP","文件解析失败","1");
						}
						
					}else if(file.getName().endsWith("SP.xml")){//商品解析
						
					}else if(file.getName().endsWith("YG.xml")){//员工解析
						
					}
				}
			}
		}
	}

	private void moveFile(File file) {
		// TODO 移走成功解析的文件  
        File dir = new File("E:\\");  
        file.renameTo(new File(dir, file.getName()));  
	}

	private void parseCP(File file) throws Exception {
		// TODO Auto-generated method stub
		Element root=this.initParse(file);
		dataList=root.elements("Product");
		inList=new ArrayList<ProductElement>();
		for (int i=0;i<dataList.size();i++){
			Element elt = (Element)dataList.get(i);
			productElement = new ProductElement();
			productElement.setProductCode(elt.element("productCode").getText());
			productElement.setProductName(elt.element("productName").getText());
			productElement.setProductDesc(elt.element("productDesc").getText());
			productElement.setProductNet(elt.element("productNet").getText());
			productElement.setProductValue(elt.element("productValue").getText());
			productElement.setProductCategory(elt.element("productCategory").getText());
			productElement.setProductType(elt.element("productType").getText());
			inList.add(productElement);
		}
		saveProduct(inList,file);
		successCount=Integer.parseInt(totalNum)-errorCount;
		//记录入库成功情况
		String sqlIn="insert into es_xml_parse_logs(log_id,file_name,file_path,create_time,total_num,success_num,data_type,file_type,"+
				" result_desc,result,source_from)values(seqxmlparse.nextval, ?, ?, sysdate, ?, ?, ?, ?, ?, ?, '"+ManagerUtils.getSourceFrom()+"')";
		this.baseDaoSupport.execute(sqlIn,file.getName(),file.getPath(),totalNum,successCount,dataType,"CP","产品（套餐货品）导入解析成功"+dataList.size()+"条记录","0");
	}

	private void saveProduct(List plist,File file) {
		// TODO 保存产品，直接套用已有的产品模板进行转换保存
		errorCount=0;
		for (int i=0;i<plist.size();i++){
			try{
				productElement=(ProductElement)plist.get(i);
				goods= new Goods();    		
				product = new Product();	
				
				//设置商品相关属性
				goods.setName(productElement.getProductName());
				goods.setGoods_id(this.baseDaoSupport.getSequences("S_ES_GOODS"));
				goods.setBrand_id("2014032710060");
				cat_id=this.findLocalValue("CP_CATID_"+productElement.getProductCategory());
				goods.setCat_id(cat_id);
//				goods.setSku(goodsManager.createSKU("product", goods.getCat_id()));
				goods.setType_id("10002");
				goods.setGoods_type("normal");
				goods.setWeight(0d);
				goods.setMarket_enable(1);
				goods.setPrice(Double.parseDouble(productElement.getProductValue()));
				goods.setCreate_time(DBTUtil.getDBCurrentTime());
				goods.setLast_modify(DBTUtil.current());
				goods.setDisabled(0);
				goods.setStaff_no("-1");
				goods.setCreator_user("1");
				goods.setSearch_key("_admin_中国联通套餐"+productElement.getProductName());
				goods.setSn(productElement.getProductCode());
				goods.setType("product");
				model_code=this.findLocalValue("CP_MODELCODE_"+productElement.getProductType());
				goods.setModel_code(model_code);
				params=this.findLocalParams("PRODUCT_"+goods.getCat_id()+"_"+goods.getModel_code()+"_"+productElement.getProductValue());
				params=params.replaceAll("BSSCODEXX", productElement.getProductCode());
				params=params.replaceAll("ESSCODEXX", productElement.getProductCode());
				goods.setParams(params);
				this.baseDaoSupport.insert("es_goods",goods);
				
				
				//设置货品相关属性
				product.setName(productElement.getProductName());
				product.setGoods_id(goods.getGoods_id());
				product.setSku(goods.getSku());
				product.setSn(productElement.getProductCode());
				product.setType("product");
				product.setStore(0);
				product.setPrice(0d);
				product.setCost(0d);
				product.setWeight(0d);
				this.baseDaoSupport.insert("es_product", product);
				logger.info("第"+i+"条记录成功"+productElement.getProductName());
			}catch(Exception e){
				//写入入库失败的记录，并且从入库列表中移除该记录
				String sqlInError="insert into es_xml_import_logs (file_name,element_name,error_type,source_from,create_time) values(?,?,?,'"+ManagerUtils.getSourceFrom()+"',sysdate)";
				this.baseDaoSupport.execute(sqlInError,file.getName(),productElement.getProductName(),e.getMessage());
				logger.info("第"+i+"条记录失败"+productElement.getProductName());
				errorCount++;
			}
		}
	}

	private String findLocalParams(String localName) throws Exception {
		// TODO 总部类型和商品系统商品的映射
		String sql="select field_value from es_mall_config_big where field_name =?";
		String localValue=this.baseDaoSupport.queryForString(sql,localName);
		if(StringUtils.isEmpty(localValue)){
			throw new Exception("本地参数映射失败"+localName);
		}
		return localValue;
	}

	private String findLocalValue(String localName) throws Exception {
		// TODO 总部类型和商品系统商品的映射
		String sql="select field_value from es_mall_config where field_name =?";
		String localValue=this.baseDaoSupport.queryForString(sql,localName);
		if(StringUtils.isEmpty(localValue)){
			throw new Exception("本地映射失败"+localName);
		}
		return localValue;
	}

	private Element initParse(File file) throws Exception {
		// TODO 初始化XML文件，同时拿到文件属性
		SAXReader reader = new SAXReader();  
        Document document = reader.read(file);  
        Element root = document.getRootElement();  
        dataType=root.element("DataType").getText();
        upLoadTime=root.element("UpdateTime").getText();
        totalNum=root.element("TotalNum").getText();
        return root;
	}

}
